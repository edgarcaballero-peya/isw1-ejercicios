

----STARTUP---- (3 June 2021 20:16:38) as /Users/edgardo.mosqueira/Desktop/ISW/CuisUniversity/CuisUniversity-4532.image!


!classRemoval: #Transfer stamp: 'ERMC 6/3/2021 20:16:45'!
Object subclass: #Transfer
	instanceVariableNames: 'value withdrawLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #WithdrawTransfer stamp: 'ERMC 6/3/2021 20:16:45'!
AccountTransaction subclass: #WithdrawTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Withdraw stamp: 'ERMC 6/3/2021 20:16:45'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #DepositTransfer stamp: 'ERMC 6/3/2021 20:16:46'!
AccountTransaction subclass: #DepositTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'ERMC 6/3/2021 20:16:46'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'ERMC 6/3/2021 20:16:46'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferNet stamp: 'ERMC 6/3/2021 20:16:47'!
AccountOperationsReport subclass: #TransferNet
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountSummary stamp: 'ERMC 6/3/2021 20:16:47'!
AccountOperationsReport subclass: #AccountSummary
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountOperationsReport stamp: 'ERMC 6/3/2021 20:16:47'!
Object subclass: #AccountOperationsReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'ERMC 6/3/2021 20:16:48'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'ERMC 6/3/2021 20:16:48'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'ERMC 6/3/2021 20:16:48'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferNetTest stamp: 'ERMC 6/3/2021 20:16:49'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'ERMC 6/3/2021 20:16:49'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'ERMC 6/3/2021 20:16:49'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountSummaryTest stamp: 'ERMC 6/3/2021 20:16:50'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of /Users/edgardo.mosqueira/Desktop/isw1-ejercicios/19-MarsRover-El regreso/MarsRover-WithHeading.st----!

TestCase subclass: #LogsXXXTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LogsXXXTests category: 'MarsRover-WithHeading' stamp: 'ERMC 6/3/2021 20:21:14'!
TestCase subclass: #LogsXXXTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRenamed: #LogsXXXTests as: #OLogsXXXTests stamp: 'ERMC 6/3/2021 20:21:37'!
Smalltalk renameClassNamed: #LogsXXXTests as: #OLogsXXXTests!

!classRenamed: #OLogsXXXTests as: #OLogsTests stamp: 'ERMC 6/3/2021 20:21:50'!
Smalltalk renameClassNamed: #OLogsXXXTests as: #OLogsTests!

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'ERMC 6/3/2021 20:27:55'!
Object subclass: #Log
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!OLogsTests methodsFor: 'nil' stamp: 'ERMC 6/3/2021 20:27:42'!
test01
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLog: log.
	
	marsRover proccess: 'f'.
	
	self assert: 1 equals: log size.
	self assert: 1@2 equals: log first.  ! !
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/3/2021 20:28:46' prior: 50895533!
test01
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLog: log.
	
	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: 1@2 equals: log first.  ! !

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/3/2021 20:28:52'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ERMC 6/3/2021 20:28:57'!
addLog: aLog 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ERMC 6/3/2021 20:36:43' prior: 50895555!
addLog: aLog 
	
	aLog logger: position.! !

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/3/2021 20:36:45'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'ERMC 6/3/2021 20:36:51'!
logger: aPoint 
	self shouldBeImplemented.! !

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'ERMC 6/3/2021 20:37:12'!
Object subclass: #Log
	instanceVariableNames: 'logs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Log methodsFor: 'as yet unclassified' stamp: 'ERMC 6/3/2021 20:37:10' prior: 50895566!
logger: aPoint 
	
	logs add: aPoint! !

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/3/2021 20:37:15'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'ERMC 6/3/2021 20:38:09' overrides: 16896425!
initialize
	
	logs _ OrderedCollection new.! !

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/3/2021 20:39:06'!
ERROR!

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/3/2021 20:39:17'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'ERMC 6/3/2021 20:39:56' overrides: 16880927!
size
	
	^logs size! !

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/3/2021 20:39:59'!
ERROR!

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/3/2021 20:39:59'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'ERMC 6/3/2021 20:41:58'!
logs 
	
	^logs! !
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/3/2021 20:42:07' prior: 50895543!
test01
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLog: log.
	
	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: 1@2 equals: log logs first.  ! !

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/3/2021 20:42:09'!
FAILURE!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'ERMC 6/3/2021 20:43:14'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ERMC 6/3/2021 20:43:11' prior: 50895560!
addLog: aLog 
	
	log _ aLog.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ERMC 6/3/2021 20:43:17' prior: 50895627!
addLog: aLog 
	
	log _ aLog! !

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/3/2021 20:43:18'!
FAILURE!
!MarsRover methodsFor: 'command processing' stamp: 'ERMC 6/3/2021 20:48:24' prior: 50895203!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommand | self processCommand: aCommand ].
	log logger: position
! !

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/3/2021 20:48:27'!
FAILURE!

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/3/2021 20:48:39'!
PASSED!

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/3/2021 20:48:39'!
PASSED!

----QUIT----(3 June 2021 22:41:36) CuisUniversity-4532.image priorSource: 18022565!

----STARTUP---- (5 June 2021 18:07:21) as /Users/edgardo.mosqueira/Desktop/ISW/CuisUniversity/CuisUniversity-4532.image!

!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 18:08:54' prior: 50895606!
test01
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: 1@2 equals: log logs first.  ! !

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/5/2021 18:08:58'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 18:09:07'!
addLogToPosition: aLog 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'ERMC 6/5/2021 18:10:30'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head log positionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 18:10:27' prior: 50895672!
addLogToPosition: aLog 
	
	positionLog _ aLog! !

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/5/2021 18:10:31'!
ERROR!
!MarsRover methodsFor: 'command processing' stamp: 'ERMC 6/5/2021 18:11:47' prior: 50895638!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommand | self processCommand: aCommand ].
 ! !
!MarsRover methodsFor: 'moving' stamp: 'ERMC 6/5/2021 18:12:58' prior: 50895191!
moveNorth
	
	position := position + (0@1).
	positionLog positionChangeTo: position! !

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/5/2021 18:13:01'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 18:13:06'!
positionChangeTo: aPoint 
	self shouldBeImplemented.! !
!Log methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 18:13:55' prior: 50895706!
positionChangeTo: aPosition

	logs add: aPosition printString.
	! !

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/5/2021 18:13:57'!
FAILURE!

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/5/2021 18:15:08'!
FAILURE!

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/5/2021 18:15:08'!
FAILURE!

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/5/2021 18:15:56'!
FAILURE!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 18:16:15' prior: 50895659!
test01
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log logs first.  ! !

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/5/2021 18:16:16'!
PASSED!

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/5/2021 18:16:16'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ERMC 6/5/2021 18:16:22'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ERMC 6/5/2021 18:16:22'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'ERMC 6/5/2021 18:16:22'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ERMC 6/5/2021 18:16:22'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ERMC 6/5/2021 18:16:22'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ERMC 6/5/2021 18:16:22'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ERMC 6/5/2021 18:16:22'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'ERMC 6/5/2021 18:16:22'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ERMC 6/5/2021 18:16:22'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ERMC 6/5/2021 18:16:22'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ERMC 6/5/2021 18:16:22'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ERMC 6/5/2021 18:16:22'!
ERROR!

!testRun: #MarsRoverTest #test13 stamp: 'ERMC 6/5/2021 18:16:22'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ERMC 6/5/2021 18:16:22'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'ERMC 6/5/2021 18:16:22'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'ERMC 6/5/2021 18:16:22'!
PASSED!

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/5/2021 18:16:22'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ERMC 6/5/2021 18:16:24'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'ERMC 6/5/2021 18:17:50' prior: 50895698!
moveNorth
	
	position := position + (0@1).
	positionLog ifNotNil: [positionLog positionChangeTo: position]! !

!testRun: #MarsRoverTest #test02 stamp: 'ERMC 6/5/2021 18:17:53'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'ERMC 6/5/2021 18:17:57'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ERMC 6/5/2021 18:17:58'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ERMC 6/5/2021 18:17:58'!
PASSED!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 19:28:55'!
test02
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'b'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log logs first.  ! !
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 19:55:40' prior: 50895799!
test02
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'b'.
	
	self assert: 1 equals: log size.
	self assert: '1@0' equals: log logs first.  ! !

!testRun: #OLogsTests #test02 stamp: 'ERMC 6/5/2021 19:55:43'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'ERMC 6/5/2021 20:05:29' prior: 50895195!
moveSouth
	
	position := position + (0@-1).
	positionLog ifNotNil: [positionLog positionChangeTo: position]
	! !

!testRun: #OLogsTests #test02 stamp: 'ERMC 6/5/2021 20:05:32'!
PASSED!

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/5/2021 20:05:32'!
PASSED!

!testRun: #OLogsTests #test02 stamp: 'ERMC 6/5/2021 20:05:32'!
PASSED!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:06:27' prior: 50895810!
test02
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'l'.
	
	self assert: 1 equals: log size.
	self assert: '0@1' equals: log logs first.  ! !

!testRun: #OLogsTests #test02 stamp: 'ERMC 6/5/2021 20:06:29'!
FAILURE!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:06:42' prior: 50895837!
test02
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'l'.
	
	self assert: 1 equals: log size.
	self assert: '1@0' equals: log logs first.  ! !
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:06:56'!
test03
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'l'.
	
	self assert: 1 equals: log size.
	self assert: '0@1' equals: log logs first.  ! !
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:07:00' prior: 50895850!
test02
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'b'.
	
	self assert: 1 equals: log size.
	self assert: '1@0' equals: log logs first.  ! !

!testRun: #OLogsTests #test03 stamp: 'ERMC 6/5/2021 20:07:05'!
FAILURE!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:09:48' prior: 50895860!
test03
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLogToHeading: log.
	
	marsRover process: 'l'.
	
	self assert: 1 equals: log size.
	self assert: '0@1' equals: log logs first.  ! !
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:15:59' prior: 50895884!
test03
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLogToHeading: log.
	
	marsRover process: 'r'.
	
	self assert: 1 equals: log size.
	self assert: 'Apuntando al Este' equals: log logs first.  ! !

!testRun: #OLogsTests #test03 stamp: 'ERMC 6/5/2021 20:16:03'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:16:07'!
addLogToHeading: aLog 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'ERMC 6/5/2021 20:16:25'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head log positionLog headingLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:16:24' prior: 50895908!
addLogToHeading: aLog 
	
	headingLog _ aLog.! !

!testRun: #OLogsTests #test03 stamp: 'ERMC 6/5/2021 20:16:27'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'ERMC 6/5/2021 20:17:39' prior: 50895141!
headSouth
	
	head := MarsRoverHeadingSouth new.
	headingLog ifNotNil: [headingLog headingChangedTo: head]! !

!testRun: #OLogsTests #test03 stamp: 'ERMC 6/5/2021 20:17:41'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:17:45'!
headingChangedTo: aMarsRoverHeadingSouth 
	self shouldBeImplemented.! !
!Log methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:18:28' prior: 50895937!
headingChangedTo: aMarsRoverHeading
	
	logs add: 'Apuntando al Este'! !

!testRun: #OLogsTests #test03 stamp: 'ERMC 6/5/2021 20:18:29'!
PASSED!

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/5/2021 20:18:29'!
PASSED!

!testRun: #OLogsTests #test02 stamp: 'ERMC 6/5/2021 20:18:29'!
PASSED!

!testRun: #OLogsTests #test03 stamp: 'ERMC 6/5/2021 20:18:29'!
FAILURE!

!testRun: #OLogsTests #test03 stamp: 'ERMC 6/5/2021 20:18:29'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'ERMC 6/5/2021 20:19:34' prior: 50895133!
headEast
	
	head := MarsRoverHeadingEast new.
	headingLog ifNotNil: [headingLog headingChangedTo: head]! !

!testRun: #OLogsTests #test03 stamp: 'ERMC 6/5/2021 20:19:35'!
PASSED!

!testRun: #OLogsTests #test03 stamp: 'ERMC 6/5/2021 20:19:39'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ERMC 6/5/2021 20:19:41'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ERMC 6/5/2021 20:19:41'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ERMC 6/5/2021 20:19:41'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ERMC 6/5/2021 20:19:41'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ERMC 6/5/2021 20:19:41'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ERMC 6/5/2021 20:19:41'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ERMC 6/5/2021 20:19:41'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ERMC 6/5/2021 20:19:41'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ERMC 6/5/2021 20:19:41'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ERMC 6/5/2021 20:19:41'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ERMC 6/5/2021 20:19:41'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ERMC 6/5/2021 20:19:41'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ERMC 6/5/2021 20:19:41'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ERMC 6/5/2021 20:19:41'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'ERMC 6/5/2021 20:19:41'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'ERMC 6/5/2021 20:19:41'!
PASSED!

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/5/2021 20:19:41'!
PASSED!

!testRun: #OLogsTests #test02 stamp: 'ERMC 6/5/2021 20:19:41'!
PASSED!

!testRun: #OLogsTests #test03 stamp: 'ERMC 6/5/2021 20:19:41'!
PASSED!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:20:48' prior: 50895895!
test03
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLogToHeading: log.
	
	marsRover process: 'l'.
	
	self assert: 1 equals: log size.
	self assert: 'Apuntando al Oeste' equals: log logs first.  ! !

!testRun: #OLogsTests #test03 stamp: 'ERMC 6/5/2021 20:20:50'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'ERMC 6/5/2021 20:28:06' prior: 50895145!
headWest
	
	head := MarsRoverHeadingWest new.
	headingLog ifNotNil: [headingLog headingChangedTo: head] ! !
!Log methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:28:36' prior: 50895942!
headingChangedTo: aMarsRoverHeading
	
	logs add: 'Apuntando al ', aMarsRoverHeading printString.! !

!testRun: #OLogsTests #test03 stamp: 'ERMC 6/5/2021 20:28:37'!
FAILURE!
!Log methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:30:49' prior: 50896035!
headingChangedTo: aMarsRoverHeading
	
	logs add: 'Apuntando al ', aMarsRoverHeading printHead.! !

!testRun: #OLogsTests #test03 stamp: 'ERMC 6/5/2021 20:30:51'!
ERROR!
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:30:58'!
printHead
	self shouldBeImplemented.! !
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:31:18' prior: 50896053!
printHead
	
	^'Oeste'.! !

!testRun: #OLogsTests #test03 stamp: 'ERMC 6/5/2021 20:31:19'!
FAILURE!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:31:39' prior: 50896015!
test03
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLogToHeading: log.
	
	marsRover process: 'r'.
	
	self assert: 1 equals: log size.
	self assert: 'Apuntando al Este' equals: log logs first.  ! !

!testRun: #OLogsTests #test03 stamp: 'ERMC 6/5/2021 20:31:43'!
ERROR!
!MarsRoverHeadingEast methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:31:47'!
printHead
	self shouldBeImplemented.! !
!MarsRoverHeadingEast methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:31:56' prior: 50896078!
printHead
	
	^'Este'! !

!testRun: #OLogsTests #test03 stamp: 'ERMC 6/5/2021 20:31:57'!
PASSED!

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/5/2021 20:31:57'!
PASSED!

!testRun: #OLogsTests #test02 stamp: 'ERMC 6/5/2021 20:31:57'!
PASSED!

!testRun: #OLogsTests #test03 stamp: 'ERMC 6/5/2021 20:31:57'!
PASSED!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:32:10'!
test04
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLogToHeading: log.
	
	marsRover process: 'l'.
	
	self assert: 1 equals: log size.
	self assert: 'Apuntando al Oeste' equals: log logs first.  ! !

!testRun: #OLogsTests #test04 stamp: 'ERMC 6/5/2021 20:32:11'!
ERROR!
!MarsRoverHeadingWest methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:32:16'!
printHead
	self shouldBeImplemented.! !
!MarsRoverHeadingWest methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:32:28' prior: 50896109!
printHead
	
	^'Oeste'! !

!testRun: #OLogsTests #test04 stamp: 'ERMC 6/5/2021 20:32:29'!
PASSED!

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/5/2021 20:32:29'!
PASSED!

!testRun: #OLogsTests #test02 stamp: 'ERMC 6/5/2021 20:32:29'!
PASSED!

!testRun: #OLogsTests #test03 stamp: 'ERMC 6/5/2021 20:32:29'!
PASSED!

!testRun: #OLogsTests #test04 stamp: 'ERMC 6/5/2021 20:32:29'!
PASSED!
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:32:48' prior: 50896058!
printHead
	
	^'Sur'.! !

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/5/2021 20:32:52'!
PASSED!

!testRun: #OLogsTests #test02 stamp: 'ERMC 6/5/2021 20:32:52'!
PASSED!

!testRun: #OLogsTests #test03 stamp: 'ERMC 6/5/2021 20:32:52'!
PASSED!

!testRun: #OLogsTests #test04 stamp: 'ERMC 6/5/2021 20:32:52'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ERMC 6/5/2021 20:32:55'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ERMC 6/5/2021 20:32:55'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ERMC 6/5/2021 20:32:55'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ERMC 6/5/2021 20:32:55'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ERMC 6/5/2021 20:32:55'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ERMC 6/5/2021 20:32:55'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ERMC 6/5/2021 20:32:55'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ERMC 6/5/2021 20:32:55'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ERMC 6/5/2021 20:32:55'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ERMC 6/5/2021 20:32:55'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ERMC 6/5/2021 20:32:55'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ERMC 6/5/2021 20:32:55'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ERMC 6/5/2021 20:32:55'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ERMC 6/5/2021 20:32:55'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'ERMC 6/5/2021 20:32:55'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'ERMC 6/5/2021 20:32:55'!
PASSED!

!testRun: #OLogsTests #test01 stamp: 'ERMC 6/5/2021 20:32:55'!
PASSED!

!testRun: #OLogsTests #test02 stamp: 'ERMC 6/5/2021 20:32:55'!
PASSED!

!testRun: #OLogsTests #test03 stamp: 'ERMC 6/5/2021 20:32:55'!
PASSED!

!testRun: #OLogsTests #test04 stamp: 'ERMC 6/5/2021 20:32:55'!
PASSED!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:34:01'!
test01WhenMarsRoverMoveForwardLogsPositionChange
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log logs first.  ! !

!methodRemoval: OLogsTests #test01 stamp: 'ERMC 6/5/2021 20:34:01'!
test01
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log logs first.  !
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:34:43'!
test02WhenMarsRoverMoveBackwardLogsPositionChange
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'b'.
	
	self assert: 1 equals: log size.
	self assert: '1@0' equals: log logs first.  ! !

!methodRemoval: OLogsTests #test02 stamp: 'ERMC 6/5/2021 20:34:43'!
test02
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'b'.
	
	self assert: 1 equals: log size.
	self assert: '1@0' equals: log logs first.  !
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:35:38'!
test03WhenMarsRoverRotateRightLogsHeadingChange
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLogToHeading: log.
	
	marsRover process: 'r'.
	
	self assert: 1 equals: log size.
	self assert: 'Apuntando al Este' equals: log logs first.  ! !

!methodRemoval: OLogsTests #test03 stamp: 'ERMC 6/5/2021 20:35:38'!
test03
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLogToHeading: log.
	
	marsRover process: 'r'.
	
	self assert: 1 equals: log size.
	self assert: 'Apuntando al Este' equals: log logs first.  !
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 20:35:59'!
test04WhenMarsRoverRotateLeftLogsHeadingChange
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLogToHeading: log.
	
	marsRover process: 'l'.
	
	self assert: 1 equals: log size.
	self assert: 'Apuntando al Oeste' equals: log logs first.  ! !

!methodRemoval: OLogsTests #test04 stamp: 'ERMC 6/5/2021 20:35:59'!
test04
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLogToHeading: log.
	
	marsRover process: 'l'.
	
	self assert: 1 equals: log size.
	self assert: 'Apuntando al Oeste' equals: log logs first.  !

!classDefinition: #MarsRoverStateWindow category: 'MarsRover-WithHeading' stamp: 'ERMC 6/5/2021 21:14:11'!
Object subclass: #MarsRoverStateWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 21:14:05'!
test05Window
	
	| marsRover window |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	marsRover addWindowToPosition: window.
	
	marsRover process: 'f'.
	
	self assert: 1@2 equals: window position.! !

!testRun: #OLogsTests #test05Window stamp: 'ERMC 6/5/2021 21:14:18'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 21:14:22'!
addWindowToPosition: aMarsRoverStateWindow 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'ERMC 6/5/2021 21:14:36'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head log positionLog headingLog positionWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 21:14:33' prior: 50896296!
addWindowToPosition: aMarsRoverStateWindow 
	
	positionWindow _ aMarsRoverStateWindow ! !

!testRun: #OLogsTests #test05Window stamp: 'ERMC 6/5/2021 21:14:37'!
ERROR!
!MarsRoverStateWindow methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 21:14:49'!
position
	self shouldBeImplemented.! !

!classDefinition: #MarsRoverStateWindow category: 'MarsRover-WithHeading' stamp: 'ERMC 6/5/2021 21:14:58'!
Object subclass: #MarsRoverStateWindow
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverStateWindow methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 21:14:56' prior: 50896319!
position
	
	^position ! !

!testRun: #OLogsTests #test05Window stamp: 'ERMC 6/5/2021 21:14:59'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'ERMC 6/5/2021 21:16:14' prior: 50895783!
moveNorth
	
	position := position + (0@1).
	positionLog ifNotNil: [positionLog positionChangeTo: position].
	positionWindow ifNotNil: [positionWindow positionChangeTo: position]
! !

!testRun: #OLogsTests #test05Window stamp: 'ERMC 6/5/2021 21:16:15'!
ERROR!
!MarsRoverStateWindow methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 21:16:21'!
positionChangeTo: aPoint 
	self shouldBeImplemented.! !
!MarsRoverStateWindow methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 21:16:32' prior: 50896349!
positionChangeTo: aPoint 

	position  _ aPoint ! !

!testRun: #OLogsTests #test05Window stamp: 'ERMC 6/5/2021 21:16:33'!
PASSED!

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/5/2021 21:16:33'!
PASSED!

!testRun: #OLogsTests #test02WhenMarsRoverMoveBackwardLogsPositionChange stamp: 'ERMC 6/5/2021 21:16:33'!
PASSED!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/5/2021 21:16:33'!
PASSED!

!testRun: #OLogsTests #test04WhenMarsRoverRotateLeftLogsHeadingChange stamp: 'ERMC 6/5/2021 21:16:33'!
PASSED!

!testRun: #OLogsTests #test05Window stamp: 'ERMC 6/5/2021 21:16:33'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ERMC 6/5/2021 21:16:37'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ERMC 6/5/2021 21:16:37'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ERMC 6/5/2021 21:16:37'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ERMC 6/5/2021 21:16:37'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ERMC 6/5/2021 21:16:37'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ERMC 6/5/2021 21:16:37'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ERMC 6/5/2021 21:16:37'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ERMC 6/5/2021 21:16:37'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ERMC 6/5/2021 21:16:37'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ERMC 6/5/2021 21:16:37'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ERMC 6/5/2021 21:16:37'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ERMC 6/5/2021 21:16:37'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ERMC 6/5/2021 21:16:37'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ERMC 6/5/2021 21:16:37'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'ERMC 6/5/2021 21:16:37'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'ERMC 6/5/2021 21:16:37'!
PASSED!

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/5/2021 21:16:37'!
PASSED!

!testRun: #OLogsTests #test02WhenMarsRoverMoveBackwardLogsPositionChange stamp: 'ERMC 6/5/2021 21:16:37'!
PASSED!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/5/2021 21:16:37'!
PASSED!

!testRun: #OLogsTests #test04WhenMarsRoverRotateLeftLogsHeadingChange stamp: 'ERMC 6/5/2021 21:16:37'!
PASSED!

!testRun: #OLogsTests #test05Window stamp: 'ERMC 6/5/2021 21:16:37'!
PASSED!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 23:47:33' prior: 50896189!
test01WhenMarsRoverMoveForwardLogsPositionChange
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	marsRover addLogToHeading: log.
	
	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log logs first.  ! !
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/5/2021 23:58:18' prior: 50896433!
test01WhenMarsRoverMoveForwardLogsPositionChange
	
	| log marsRover |
	marsRover _ MarsRover at: 1@1 heading: #North.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	
	marsRover process: 'f'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log logs first.  ! !
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 00:09:36'!
test05WindowLogsPositionChange
	
	| marsRover window |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	marsRover addWindowToPosition: window.
	
	marsRover process: 'f'.
	
	self assert: 1@2 equals: window position.! !

!methodRemoval: OLogsTests #test05Window stamp: 'ERMC 6/6/2021 00:09:36'!
test05Window
	
	| marsRover window |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	marsRover addWindowToPosition: window.
	
	marsRover process: 'f'.
	
	self assert: 1@2 equals: window position.!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 00:10:59'!
test06WindowLogsPositionChangeBackward
	
	| marsRover window |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'b'.
	
	self assert: 1@0 equals: window position.! !

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 00:11:01'!
ERROR!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 00:11:09' prior: 50896479!
test06WindowLogsPositionChangeBackward
	
	| marsRover window |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	marsRover addWindowToPosition: window.
	
	marsRover process: 'b'.
	
	self assert: 1@0 equals: window position.! !

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 00:11:11'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'ERMC 6/6/2021 00:12:42' prior: 50895823!
moveSouth
	
	position := position + (0@-1).
	positionLog ifNotNil: [positionLog positionChangeTo: position].
	positionWindow ifNotNil: [positionWindow positionChangeTo: position]
	! !

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 00:12:44'!
FAILURE!

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 00:12:50'!
FAILURE!

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 00:12:54'!
PASSED!

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 00:12:54'!
PASSED!

!testRun: #OLogsTests #test02WhenMarsRoverMoveBackwardLogsPositionChange stamp: 'ERMC 6/6/2021 00:12:54'!
PASSED!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 00:12:54'!
PASSED!

!testRun: #OLogsTests #test04WhenMarsRoverRotateLeftLogsHeadingChange stamp: 'ERMC 6/6/2021 00:12:54'!
PASSED!

!testRun: #OLogsTests #test05WindowLogsPositionChange stamp: 'ERMC 6/6/2021 00:12:54'!
PASSED!

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 00:12:54'!
PASSED!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 00:16:36'!
test07WindowLogsHeadingChangeRotateRight
	
	| marsRover window |
	marsRover _ MarsRover at: 1@1 heading: #East.
	
	window _ MarsRoverStateWindow new.
	marsRover addWindowToPosition: window.
	
	marsRover process: 'b'.
	
	self assert: 'Apuntando al Sur' equals: window position.! !

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 00:16:38'!
FAILURE!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 00:17:03' prior: 50896548!
test07WindowLogsHeadingChangeRotateRight
	
	| marsRover window |
	marsRover _ MarsRover at: 1@1 heading: #East.
	
	window _ MarsRoverStateWindow new.
	marsRover addWindowToPosition: window.
	
	marsRover process: 'r'.
	
	self assert: 'Apuntando al Sur' equals: window position.! !

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 00:17:04'!
FAILURE!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 00:18:01' prior: 50896564!
test07WindowLogsHeadingChangeRotateRight
	
	| marsRover window |
	marsRover _ MarsRover at: 1@1 heading: #East.
	
	window _ MarsRoverStateWindow new.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'r'.
	
	self assert: 'Apuntando al Sur' equals: window position.! !

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 00:18:02'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 00:18:08'!
addWindowToHeading: aMarsRoverStateWindow 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'ERMC 6/6/2021 00:19:00'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head log positionLog headingLog positionWindow headingWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 00:18:59' prior: 50896595!
addWindowToHeading: aMarsRoverStateWindow 
	
	headingWindow _ aMarsRoverStateWindow ! !

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 00:19:01'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'ERMC 6/6/2021 00:19:51' prior: 50895929!
headSouth
	
	head := MarsRoverHeadingSouth new.
	headingLog ifNotNil: [headingLog headingChangedTo: head].
	headingWindow ifNotNil: [headingWindow headingChangedTo: head]! !

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 00:19:53'!
ERROR!
!MarsRoverStateWindow methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 00:20:01'!
headingChangedTo: aMarsRoverHeadingSouth 
	self shouldBeImplemented.! !

!classDefinition: #MarsRoverStateWindow category: 'MarsRover-WithHeading' stamp: 'ERMC 6/6/2021 00:21:09'!
Object subclass: #MarsRoverStateWindow
	instanceVariableNames: 'position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverStateWindow methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 00:21:08' prior: 50896631!
headingChangedTo: aMarsRoverHeading 
	
	heading add: 'Apuntando al ', aMarsRoverHeading printHead.! !

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 00:21:11'!
ERROR!
!MarsRoverStateWindow methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 00:21:50' prior: 50896646!
headingChangedTo: aMarsRoverHeading 
	
	heading _ 'Apuntando al ', aMarsRoverHeading printHead.! !

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 00:21:54'!
FAILURE!

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 00:21:54'!
FAILURE!

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 00:23:06'!
FAILURE!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 00:25:24' prior: 50896580!
test07WindowLogsHeadingChangeRotateRight
	
	| marsRover window |
	marsRover _ MarsRover at: 1@1 heading: #East.
	
	window _ MarsRoverStateWindow new.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'r'.
	
	self assert: 'Apuntando al Sur' equals: window heading.! !
!MarsRoverStateWindow methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 00:25:35'!
heading

	^heading ! !

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 00:25:40'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ERMC 6/6/2021 00:25:43'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ERMC 6/6/2021 00:25:43'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ERMC 6/6/2021 00:25:43'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ERMC 6/6/2021 00:25:43'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ERMC 6/6/2021 00:25:43'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ERMC 6/6/2021 00:25:43'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ERMC 6/6/2021 00:25:43'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ERMC 6/6/2021 00:25:43'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ERMC 6/6/2021 00:25:43'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ERMC 6/6/2021 00:25:43'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ERMC 6/6/2021 00:25:43'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ERMC 6/6/2021 00:25:43'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ERMC 6/6/2021 00:25:43'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ERMC 6/6/2021 00:25:43'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'ERMC 6/6/2021 00:25:44'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'ERMC 6/6/2021 00:25:44'!
PASSED!

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 00:25:44'!
PASSED!

!testRun: #OLogsTests #test02WhenMarsRoverMoveBackwardLogsPositionChange stamp: 'ERMC 6/6/2021 00:25:44'!
PASSED!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 00:25:44'!
PASSED!

!testRun: #OLogsTests #test04WhenMarsRoverRotateLeftLogsHeadingChange stamp: 'ERMC 6/6/2021 00:25:44'!
PASSED!

!testRun: #OLogsTests #test05WindowLogsPositionChange stamp: 'ERMC 6/6/2021 00:25:44'!
PASSED!

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 00:25:44'!
PASSED!

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 00:25:44'!
PASSED!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 00:28:47' prior: 50896673!
test07WindowLogsHeadingChangeRotateRight
	
	| marsRover window |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'l'.
	
	self assert: 'Apuntando al Oeste' equals: window heading.! !

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 00:28:49'!
FAILURE!

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 00:29:01'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'ERMC 6/6/2021 00:29:48' prior: 50896028!
headWest
	
	head := MarsRoverHeadingWest new.
	headingLog ifNotNil: [headingLog headingChangedTo: head].
	headingWindow ifNotNil: [headingWindow headingChangedTo: head] ! !

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 00:29:49'!
PASSED!

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 00:29:49'!
PASSED!

!testRun: #OLogsTests #test02WhenMarsRoverMoveBackwardLogsPositionChange stamp: 'ERMC 6/6/2021 00:29:49'!
PASSED!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 00:29:49'!
PASSED!

!testRun: #OLogsTests #test04WhenMarsRoverRotateLeftLogsHeadingChange stamp: 'ERMC 6/6/2021 00:29:49'!
PASSED!

!testRun: #OLogsTests #test05WindowLogsPositionChange stamp: 'ERMC 6/6/2021 00:29:49'!
PASSED!

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 00:29:49'!
PASSED!

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 00:29:49'!
PASSED!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 00:30:17'!
test08WindowLogsHeadingChangeRotateLeft
	
	| marsRover window |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'l'.
	
	self assert: 'Apuntando al Oeste' equals: window heading.! !

!methodRemoval: OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 00:30:17'!
test07WindowLogsHeadingChangeRotateRight
	
	| marsRover window |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'l'.
	
	self assert: 'Apuntando al Oeste' equals: window heading.!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 00:30:44'!
test07WindowLogsHeadingChangeRotateRight
	
	| marsRover window |
	marsRover _ MarsRover at: 1@1 heading: #East.
	
	window _ MarsRoverStateWindow new.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'r'.
	
	self assert: 'Apuntando al Sur' equals: window heading.! !

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 00:30:45'!
PASSED!

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 00:30:45'!
PASSED!

!testRun: #OLogsTests #test02WhenMarsRoverMoveBackwardLogsPositionChange stamp: 'ERMC 6/6/2021 00:30:45'!
PASSED!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 00:30:45'!
PASSED!

!testRun: #OLogsTests #test04WhenMarsRoverRotateLeftLogsHeadingChange stamp: 'ERMC 6/6/2021 00:30:45'!
PASSED!

!testRun: #OLogsTests #test05WindowLogsPositionChange stamp: 'ERMC 6/6/2021 00:30:45'!
PASSED!

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 00:30:45'!
PASSED!

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 00:30:45'!
PASSED!

!testRun: #OLogsTests #test08WindowLogsHeadingChangeRotateLeft stamp: 'ERMC 6/6/2021 00:30:45'!
PASSED!

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 00:33:41'!
PASSED!

!testRun: #OLogsTests #test02WhenMarsRoverMoveBackwardLogsPositionChange stamp: 'ERMC 6/6/2021 00:33:41'!
PASSED!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 00:33:41'!
PASSED!

!testRun: #OLogsTests #test04WhenMarsRoverRotateLeftLogsHeadingChange stamp: 'ERMC 6/6/2021 00:33:41'!
PASSED!

!testRun: #OLogsTests #test05WindowLogsPositionChange stamp: 'ERMC 6/6/2021 00:33:41'!
PASSED!

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 00:33:41'!
PASSED!

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 00:33:41'!
PASSED!

!testRun: #OLogsTests #test08WindowLogsHeadingChangeRotateLeft stamp: 'ERMC 6/6/2021 00:33:41'!
PASSED!
!MarsRover methodsFor: 'moving' stamp: 'ERMC 6/6/2021 00:34:49' prior: 50896338!
moveNorth
	
	self changePositionTo: position + (0@1).
! !
!MarsRover methodsFor: 'moving' stamp: 'ERMC 6/6/2021 00:35:33'!
changePositionTo: newPosition

	position  _ newPosition.
	
	positionLog ifNotNil: [positionLog positionChangeTo: position].
	positionWindow ifNotNil: [positionWindow positionChangeTo: position]! !

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 00:35:36'!
PASSED!

!testRun: #OLogsTests #test02WhenMarsRoverMoveBackwardLogsPositionChange stamp: 'ERMC 6/6/2021 00:35:36'!
PASSED!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 00:35:36'!
PASSED!

!testRun: #OLogsTests #test04WhenMarsRoverRotateLeftLogsHeadingChange stamp: 'ERMC 6/6/2021 00:35:36'!
PASSED!

!testRun: #OLogsTests #test05WindowLogsPositionChange stamp: 'ERMC 6/6/2021 00:35:36'!
PASSED!

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 00:35:36'!
PASSED!

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 00:35:36'!
PASSED!

!testRun: #OLogsTests #test08WindowLogsHeadingChangeRotateLeft stamp: 'ERMC 6/6/2021 00:35:36'!
PASSED!
!MarsRover methodsFor: 'moving' stamp: 'ERMC 6/6/2021 00:36:33' prior: 50896509!
moveSouth
	
	self changePositionTo: position + (0@-1).! !

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 00:36:37'!
PASSED!

!testRun: #OLogsTests #test02WhenMarsRoverMoveBackwardLogsPositionChange stamp: 'ERMC 6/6/2021 00:36:37'!
PASSED!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 00:36:37'!
PASSED!

!testRun: #OLogsTests #test04WhenMarsRoverRotateLeftLogsHeadingChange stamp: 'ERMC 6/6/2021 00:36:37'!
PASSED!

!testRun: #OLogsTests #test05WindowLogsPositionChange stamp: 'ERMC 6/6/2021 00:36:37'!
PASSED!

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 00:36:37'!
PASSED!

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 00:36:37'!
PASSED!

!testRun: #OLogsTests #test08WindowLogsHeadingChangeRotateLeft stamp: 'ERMC 6/6/2021 00:36:37'!
PASSED!
!MarsRover methodsFor: 'heading' stamp: 'ERMC 6/6/2021 00:37:48' prior: 50896773!
headWest
	
	self changeHeadTo: MarsRoverHeadingWest new.
 ! !
!MarsRover methodsFor: 'heading' stamp: 'ERMC 6/6/2021 00:38:28'!
changeHeadTo: newHeading

	head _ newHeading.
	
	headingLog ifNotNil: [headingLog headingChangedTo: head].
	headingWindow ifNotNil: [headingWindow headingChangedTo: head]
 ! !

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 00:38:29'!
PASSED!

!testRun: #OLogsTests #test02WhenMarsRoverMoveBackwardLogsPositionChange stamp: 'ERMC 6/6/2021 00:38:30'!
PASSED!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 00:38:30'!
PASSED!

!testRun: #OLogsTests #test04WhenMarsRoverRotateLeftLogsHeadingChange stamp: 'ERMC 6/6/2021 00:38:30'!
PASSED!

!testRun: #OLogsTests #test05WindowLogsPositionChange stamp: 'ERMC 6/6/2021 00:38:30'!
PASSED!

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 00:38:30'!
PASSED!

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 00:38:30'!
PASSED!

!testRun: #OLogsTests #test08WindowLogsHeadingChangeRotateLeft stamp: 'ERMC 6/6/2021 00:38:30'!
PASSED!
!MarsRover methodsFor: 'heading' stamp: 'ERMC 6/6/2021 00:38:55' prior: 50896619!
headSouth
	
	 self changeHeadTo: MarsRoverHeadingSouth new.

	! !

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 00:39:01'!
PASSED!

!testRun: #OLogsTests #test02WhenMarsRoverMoveBackwardLogsPositionChange stamp: 'ERMC 6/6/2021 00:39:01'!
PASSED!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 00:39:01'!
PASSED!

!testRun: #OLogsTests #test04WhenMarsRoverRotateLeftLogsHeadingChange stamp: 'ERMC 6/6/2021 00:39:01'!
PASSED!

!testRun: #OLogsTests #test05WindowLogsPositionChange stamp: 'ERMC 6/6/2021 00:39:01'!
PASSED!

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 00:39:01'!
PASSED!

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 00:39:01'!
PASSED!

!testRun: #OLogsTests #test08WindowLogsHeadingChangeRotateLeft stamp: 'ERMC 6/6/2021 00:39:01'!
PASSED!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 00:49:16'!
test09
	
	| marsRover window log |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	log _ Log new.
	
	marsRover addLogToPosition: window.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'lf'.
	
	
	self assert: 1 equals: log size.
	self assert: '2@1' equals: log first. 
	self assert: 'Apuntando al Oeste' equals: window heading.! !

!testRun: #OLogsTests #test09 stamp: 'ERMC 6/6/2021 00:49:18'!
FAILURE!

----QUIT----(6 June 2021 00:50:39) CuisUniversity-4532.image priorSource: 18048023!

----STARTUP---- (6 June 2021 16:14:30) as /Users/edgardo.mosqueira/Desktop/ISW/CuisUniversity/CuisUniversity-4532.image!

!Behavior method!
at: aPosition heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{43 to: 46}) new ] valueCoveringAll:
		{48 to: 50})
		initializeAt:
			(aPosition
				cover: (66 to: 74)
				declaredAt: (5 to: 13))
		heading:
			([
			(MarsRoverHeading
				cover: (86 to: 101)
				declaredAt: (86 to: 101)) heading:
				(aCardinalPoint
					cover: (112 to: 125)
					declaredAt: (24 to: 37)) ] valueCoveringAll:
				{103 to: 110}) ] valueCoveringAll:
		{52 to: 64. 76 to: 83}.! !
!Behavior method!
heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{28 to: 31}) subclasses ] valueCoveringAll:
		{33 to: 42})
		detect: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (84 to: 106)
				declaredAt: (58 to: 80)) isFor:
				(aCardinalPoint
					cover: (115 to: 128)
					declaredAt: (10 to: 23)) ] valueCoveringAll:
				{108 to: 113} ]
		ifFound: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (172 to: 194)
				declaredAt: (146 to: 168)) new ] valueCoveringAll:
				{196 to: 198} ]
		ifNone: [
			[
			(self coverAll:
				{214 to: 217}) error:
				([
				(MarsRover
					cover: (226 to: 234)
					declaredAt: (226 to: 234)) invalidCardinalPointErrorDescription ] valueCoveringAll:
					{236 to: 271}) ] valueCoveringAll:
				{219 to: 224} ]] valueCoveringAll:
		{47 to: 53. 134 to: 141. 204 to: 210}.! !
!Behavior method!
isFor: aCardinalPoint
	^ [
	([
	(self coverAll:
		{26 to: 29}) cardinalPoint ] valueCoveringAll:
		{31 to: 43}) =
		(aCardinalPoint
			cover: (47 to: 60)
			declaredAt: (8 to: 21)) ] valueCoveringAll:
		{45 to: 45}.! !
!Behavior method!
cardinalPoint
	^ #East coverAll:
		{18 to: 22}.! !
!Behavior method!
cardinalPoint
	^ #North coverAll:
		{18 to: 23}.! !
!Behavior method!
initializeAt: aPosition heading: aHeading
	(position _ aPosition
		cover: (57 to: 65)
		declaredAt: (15 to: 23))
		cover: (45 to: 52)
		declaredAt: (45 to: 52).
	(head _ aHeading
		cover: (77 to: 84)
		declaredAt: (34 to: 41))
		cover: (69 to: 72)
		declaredAt: (69 to: 72).! !
!Behavior method!
process: aSequenceOfCommands
	[
	(aSequenceOfCommands
		cover: (32 to: 50)
		declaredAt: (10 to: 28)) do: [ :aCommand |
		[
		(self coverAll:
			{69 to: 72}) processCommand:
			(aCommand
				cover: (90 to: 97)
				declaredAt: (58 to: 65)) ] valueCoveringAll:
			{74 to: 88} ]] valueCoveringAll:
		{52 to: 54}.! !
!Behavior method!
isAt: aPosition heading: aCardinalPoint
	^ [
	([
	(position
		cover: (44 to: 51)
		declaredAt: (44 to: 51)) =
		(aPosition
			cover: (55 to: 63)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{53 to: 53}) and: [
		[
		(head
			cover: (72 to: 75)
			declaredAt: (72 to: 75)) isHeading:
			(aCardinalPoint
				cover: (88 to: 101)
				declaredAt: (26 to: 39)) ] valueCoveringAll:
			{77 to: 86} ]] valueCoveringAll:
		{65 to: 68}.! !
!Behavior method!
isHeading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{30 to: 33}) class ] valueCoveringAll:
		{35 to: 39}) isFor:
		(aCardinalPoint
			cover: (48 to: 61)
			declaredAt: (12 to: 25)) ] valueCoveringAll:
		{41 to: 46}.! !

!testRun: #MarsRoverTest #test01 stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!
!Behavior method!
processCommand: aCommand
	[
	([
	(self coverAll:
		{29 to: 32}) isForwardCommand:
		(aCommand
			cover: (52 to: 59)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{34 to: 50}) ifTrue: [ ^ [
		(self coverAll:
			{74 to: 77}) moveForward ] valueCoveringAll:
			{79 to: 89} ]] valueCoveringAll:
		{62 to: 68}.
	[
	([
	(self coverAll:
		{96 to: 99}) isBackwardCommand:
		(aCommand
			cover: (120 to: 127)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{101 to: 118}) ifTrue: [ ^ [
		(self coverAll:
			{142 to: 145}) moveBackward ] valueCoveringAll:
			{147 to: 158} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(self coverAll:
		{165 to: 168}) isRotateRightCommand:
		(aCommand
			cover: (192 to: 199)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{170 to: 190}) ifTrue: [ ^ [
		(self coverAll:
			{214 to: 217}) rotateRight ] valueCoveringAll:
			{219 to: 229} ]] valueCoveringAll:
		{202 to: 208}.
	[
	([
	(self coverAll:
		{236 to: 239}) isRotateLeftCommand:
		(aCommand
			cover: (262 to: 269)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{241 to: 260}) ifTrue: [ ^ [
		(self coverAll:
			{284 to: 287}) rotateLeft ] valueCoveringAll:
			{289 to: 298} ]] valueCoveringAll:
		{272 to: 278}.
	[
	(self coverAll:
		{305 to: 308}) signalInvalidCommand ] valueCoveringAll:
		{310 to: 329}.! !
!Behavior method!
isForwardCommand: aCommand
	^ [
	(aCommand
		cover: (31 to: 38)
		declaredAt: (19 to: 26)) =
		($f coverAll:
			{42 to: 43}) ] valueCoveringAll:
		{40 to: 40}.! !
!Behavior method!
moveForward
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) moveForward:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.! !
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveNorth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
moveNorth
	[
	(self coverAll:
		{14 to: 17}) changePositionTo:
		([
		(position
			cover: (37 to: 44)
			declaredAt: (37 to: 44)) +
			([
			(0 coverAll:
				{49 to: 49}) @
				(1 coverAll:
					{51 to: 51}) ] valueCoveringAll:
				{50 to: 50}) ] valueCoveringAll:
			{46 to: 46}) ] valueCoveringAll:
		{19 to: 35}.! !
!Behavior method!
changePositionTo: newPosition
	(position _ newPosition
		cover: (45 to: 55)
		declaredAt: (19 to: 29))
		cover: (33 to: 40)
		declaredAt: (33 to: 40).
	[
	(positionLog
		cover: (61 to: 71)
		declaredAt: (61 to: 71)) ifNotNil: [
		[
		(positionLog
			cover: (84 to: 94)
			declaredAt: (61 to: 71)) positionChangeTo:
			(position
				cover: (114 to: 121)
				declaredAt: (33 to: 40)) ] valueCoveringAll:
			{96 to: 112} ]] valueCoveringAll:
		{73 to: 81}.
	[
	(positionWindow
		cover: (126 to: 139)
		declaredAt: (126 to: 139)) ifNotNil: [
		[
		(positionWindow
			cover: (152 to: 165)
			declaredAt: (126 to: 139)) positionChangeTo:
			(position
				cover: (185 to: 192)
				declaredAt: (33 to: 40)) ] valueCoveringAll:
			{167 to: 183} ]] valueCoveringAll:
		{141 to: 149}.! !

!testRun: #MarsRoverTest #test02 stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!
!Behavior method!
isBackwardCommand: aCommand
	^ [
	(aCommand
		cover: (32 to: 39)
		declaredAt: (20 to: 27)) =
		($b coverAll:
			{43 to: 44}) ] valueCoveringAll:
		{41 to: 41}.! !
!Behavior method!
moveBackward
	[
	(head
		cover: (17 to: 20)
		declaredAt: (17 to: 20)) moveBackward:
		(self coverAll:
			{36 to: 39}) ] valueCoveringAll:
		{22 to: 34}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveSouth ] valueCoveringAll:
		{41 to: 49}.! !
!Behavior method!
moveSouth
	[
	(self coverAll:
		{14 to: 17}) changePositionTo:
		([
		(position
			cover: (37 to: 44)
			declaredAt: (37 to: 44)) +
			([
			(0 coverAll:
				{49 to: 49}) @
				(-1 coverAll:
					{51 to: 52}) ] valueCoveringAll:
				{50 to: 50}) ] valueCoveringAll:
			{46 to: 46}) ] valueCoveringAll:
		{19 to: 35}.! !

!testRun: #MarsRoverTest #test03 stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!
!Behavior method!
isRotateRightCommand: aCommand
	^ [
	(aCommand
		cover: (35 to: 42)
		declaredAt: (23 to: 30)) =
		($r coverAll:
			{46 to: 47}) ] valueCoveringAll:
		{44 to: 44}.! !
!Behavior method!
rotateRight
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) rotateRight:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
headEast
	(head _ [
	(MarsRoverHeadingEast
		cover: (21 to: 40)
		declaredAt: (21 to: 40)) new ] valueCoveringAll:
		{42 to: 44})
		cover: (13 to: 16)
		declaredAt: (13 to: 16).
	[
	(headingLog
		cover: (48 to: 57)
		declaredAt: (48 to: 57)) ifNotNil: [
		[
		(headingLog
			cover: (70 to: 79)
			declaredAt: (48 to: 57)) headingChangedTo:
			(head
				cover: (99 to: 102)
				declaredAt: (13 to: 16)) ] valueCoveringAll:
			{81 to: 97} ]] valueCoveringAll:
		{59 to: 67}.! !

!testRun: #MarsRoverTest #test04 stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!
!Behavior method!
isRotateLeftCommand: aCommand
	^ [
	(aCommand
		cover: (34 to: 41)
		declaredAt: (22 to: 29)) =
		($l coverAll:
			{45 to: 46}) ] valueCoveringAll:
		{43 to: 43}.! !
!Behavior method!
rotateLeft
	[
	(head
		cover: (15 to: 18)
		declaredAt: (15 to: 18)) rotateLeft:
		(self coverAll:
			{32 to: 35}) ] valueCoveringAll:
		{20 to: 30}.! !
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headWest ] valueCoveringAll:
		{39 to: 46}.! !
!Behavior method!
headWest
	[
	(self coverAll:
		{13 to: 16}) changeHeadTo:
		([
		(MarsRoverHeadingWest
			cover: (32 to: 51)
			declaredAt: (32 to: 51)) new ] valueCoveringAll:
			{53 to: 55}) ] valueCoveringAll:
		{18 to: 30}.! !
!Behavior method!
changeHeadTo: newHeading
	(head _ newHeading
		cover: (35 to: 44)
		declaredAt: (15 to: 24))
		cover: (28 to: 31)
		declaredAt: (28 to: 31).
	[
	(headingLog
		cover: (50 to: 59)
		declaredAt: (50 to: 59)) ifNotNil: [
		[
		(headingLog
			cover: (72 to: 81)
			declaredAt: (50 to: 59)) headingChangedTo:
			(head
				cover: (101 to: 104)
				declaredAt: (28 to: 31)) ] valueCoveringAll:
			{83 to: 99} ]] valueCoveringAll:
		{61 to: 69}.
	[
	(headingWindow
		cover: (109 to: 121)
		declaredAt: (109 to: 121)) ifNotNil: [
		[
		(headingWindow
			cover: (134 to: 146)
			declaredAt: (109 to: 121)) headingChangedTo:
			(head
				cover: (166 to: 169)
				declaredAt: (28 to: 31)) ] valueCoveringAll:
			{148 to: 164} ]] valueCoveringAll:
		{123 to: 131}.! !
!Behavior method!
cardinalPoint
	^ #West coverAll:
		{18 to: 22}.! !

!testRun: #MarsRoverTest #test05 stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!
!Behavior method!
signalInvalidCommand
	[
	(self coverAll:
		{25 to: 28}) error:
		([
		(self coverAll:
			{37 to: 40}) invalidCommandErrorDescription ] valueCoveringAll:
			{42 to: 71}) ] valueCoveringAll:
		{30 to: 35}.! !
!Behavior method!
invalidCommandErrorDescription
	^ 'Invalid command' coverAll:
		{36 to: 52}.! !

!testRun: #MarsRoverTest #test06 stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
moveEast
	(position _ [
	(position
		cover: (13 to: 20)
		declaredAt: (13 to: 20)) +
		([
		(1 coverAll:
			{37 to: 37}) @
			(0 coverAll:
				{39 to: 39}) ] valueCoveringAll:
			{38 to: 38}) ] valueCoveringAll:
		{34 to: 34})
		cover: (25 to: 32)
		declaredAt: (13 to: 20).! !

!testRun: #MarsRoverTest #test08 stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveWest ] valueCoveringAll:
		{41 to: 48}.! !
!Behavior method!
moveWest
	(position _ [
	(position
		cover: (13 to: 20)
		declaredAt: (13 to: 20)) +
		([
		(-1 coverAll:
			{37 to: 38}) @
			(0 coverAll:
				{40 to: 40}) ] valueCoveringAll:
			{39 to: 39}) ] valueCoveringAll:
		{34 to: 34})
		cover: (25 to: 32)
		declaredAt: (13 to: 20).! !

!testRun: #MarsRoverTest #test09 stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headSouth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
headSouth
	[
	(self coverAll:
		{15 to: 18}) changeHeadTo:
		([
		(MarsRoverHeadingSouth
			cover: (34 to: 54)
			declaredAt: (34 to: 54)) new ] valueCoveringAll:
			{56 to: 58}) ] valueCoveringAll:
		{20 to: 32}.! !
!Behavior method!
cardinalPoint
	^ #South coverAll:
		{18 to: 23}.! !

!testRun: #MarsRoverTest #test10 stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headNorth ] valueCoveringAll:
		{39 to: 47}.! !
!Behavior method!
headNorth
	(head _ [
	(MarsRoverHeadingNorth
		cover: (22 to: 42)
		declaredAt: (22 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 17)
		declaredAt: (14 to: 17).! !

!testRun: #MarsRoverTest #test11 stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveSouth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveNorth ] valueCoveringAll:
		{41 to: 49}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headWest ] valueCoveringAll:
		{40 to: 47}.! !

!testRun: #MarsRoverTest #test12 stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headEast ] valueCoveringAll:
		{39 to: 46}.! !

!testRun: #MarsRoverTest #test13 stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveWest ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (15 to: 24)) moveEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headNorth ] valueCoveringAll:
		{40 to: 48}.! !

!testRun: #MarsRoverTest #test14 stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headSouth ] valueCoveringAll:
		{39 to: 47}.! !

!testRun: #MarsRoverTest #test15 stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!
!Behavior method!
invalidCardinalPointErrorDescription
	^ 'Invalid cardinal point' coverAll:
		{42 to: 65}.! !

!testRun: #MarsRoverTest #test16 stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!
!Behavior method!
initialize
	(logs _ [
	(OrderedCollection
		cover: (22 to: 38)
		declaredAt: (22 to: 38)) new ] valueCoveringAll:
		{40 to: 42})
		cover: (15 to: 18)
		declaredAt: (15 to: 18).! !
!Behavior method!
addLogToPosition: aLog
	(positionLog _ aLog
		cover: (42 to: 45)
		declaredAt: (19 to: 22))
		cover: (28 to: 38)
		declaredAt: (28 to: 38).! !
!Behavior method!
positionChangeTo: aPosition
	[
	(logs
		cover: (31 to: 34)
		declaredAt: (31 to: 34)) add:
		([
		(aPosition
			cover: (41 to: 49)
			declaredAt: (19 to: 27)) printString ] valueCoveringAll:
			{51 to: 61}) ] valueCoveringAll:
		{36 to: 39}.! !
!Behavior method!
size
	^ [
	(logs
		cover: (10 to: 13)
		declaredAt: (10 to: 13)) size ] valueCoveringAll:
		{15 to: 18}.! !
!Behavior method!
logs
	^ logs
		cover: (11 to: 14)
		declaredAt: (11 to: 14).! !

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!

!testRun: #OLogsTests #test02WhenMarsRoverMoveBackwardLogsPositionChange stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!
!Behavior method!
addLogToHeading: aLog
	(headingLog _ aLog
		cover: (40 to: 43)
		declaredAt: (18 to: 21))
		cover: (27 to: 36)
		declaredAt: (27 to: 36).! !
!Behavior method!
headingChangedTo: aMarsRoverHeading
	[
	(logs
		cover: (40 to: 43)
		declaredAt: (40 to: 43)) add:
		([
		('Apuntando al ' coverAll:
			{50 to: 64}) ,
			([
			(aMarsRoverHeading
				cover: (67 to: 83)
				declaredAt: (19 to: 35)) printHead ] valueCoveringAll:
				{85 to: 93}) ] valueCoveringAll:
			{65 to: 65}) ] valueCoveringAll:
		{45 to: 48}.! !
!Behavior method!
printHead
	^ 'Este' coverAll:
		{15 to: 20}.! !

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!
!Behavior method!
printHead
	^ 'Oeste' coverAll:
		{15 to: 21}.! !

!testRun: #OLogsTests #test04WhenMarsRoverRotateLeftLogsHeadingChange stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!
!Behavior method!
addWindowToPosition: aMarsRoverStateWindow
	(positionWindow _ aMarsRoverStateWindow
		cover: (65 to: 85)
		declaredAt: (22 to: 42))
		cover: (48 to: 61)
		declaredAt: (48 to: 61).! !
!Behavior method!
positionChangeTo: aPoint
	(position _ aPoint
		cover: (41 to: 46)
		declaredAt: (19 to: 24))
		cover: (29 to: 36)
		declaredAt: (29 to: 36).! !
!Behavior method!
position
	^ position
		cover: (14 to: 21)
		declaredAt: (14 to: 21).! !

!testRun: #OLogsTests #test05WindowLogsPositionChange stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!
!Behavior method!
addWindowToHeading: aMarsRoverStateWindow
	(headingWindow _ aMarsRoverStateWindow
		cover: (63 to: 83)
		declaredAt: (21 to: 41))
		cover: (47 to: 59)
		declaredAt: (47 to: 59).! !
!Behavior method!
headingChangedTo: aMarsRoverHeading
	(heading _ [
	('Apuntando al ' coverAll:
		{51 to: 65}) ,
		([
		(aMarsRoverHeading
			cover: (68 to: 84)
			declaredAt: (19 to: 35)) printHead ] valueCoveringAll:
			{86 to: 94}) ] valueCoveringAll:
		{66 to: 66})
		cover: (41 to: 47)
		declaredAt: (41 to: 47).! !
!Behavior method!
printHead
	^ 'Sur' coverAll:
		{15 to: 19}.! !
!Behavior method!
heading
	^ heading
		cover: (12 to: 18)
		declaredAt: (12 to: 18).! !

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!

!testRun: #OLogsTests #test08WindowLogsHeadingChangeRotateLeft stamp: 'ERMC 6/6/2021 16:28:11'!
PASSED!

!testRun: #OLogsTests #test09 stamp: 'ERMC 6/6/2021 16:28:11'!
FAILURE!

!testRun: #OLogsTests #test09 stamp: 'ERMC 6/6/2021 16:28:11'!
FAILURE!

!testRun: #OLogsTests #test09 stamp: 'ERMC 6/6/2021 16:31:39'!
FAILURE!

!testRun: #OLogsTests #test09 stamp: 'ERMC 6/6/2021 16:31:39'!
FAILURE!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 16:32:29' prior: 50897045!
test09
	
	| marsRover window log |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	log _ Log new.
	
	marsRover addLogToPosition: window.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'rf'.
	
	
	self assert: 1 equals: log size.
	self assert: '2@1' equals: log first. 
	self assert: 'Apuntando al Oeste' equals: window heading.! !

!testRun: #OLogsTests #test09 stamp: 'ERMC 6/6/2021 16:32:31'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'ERMC 6/6/2021 16:33:34' prior: 50895959!
headEast
	
	head := MarsRoverHeadingEast new.
	headingLog ifNotNil: [headingLog headingChangedTo: head].
	headingWindow ifNotNil: [headingWindow headingChangedTo: head].
! !

!testRun: #OLogsTests #test09 stamp: 'ERMC 6/6/2021 16:33:35'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'ERMC 6/6/2021 16:35:23' prior: 50895183!
moveEast
	
	position := position + (1@0).
	headingLog ifNotNil: [headingLog positionChangeTo: position]! !

!testRun: #OLogsTests #test09 stamp: 'ERMC 6/6/2021 16:35:32'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'ERMC 6/6/2021 16:36:24' prior: 50897687!
moveEast
	
	position := position + (1@0).
	positionLog ifNotNil: [positionLog positionChangeTo: position]! !

!testRun: #OLogsTests #test09 stamp: 'ERMC 6/6/2021 16:36:25'!
FAILURE!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 16:36:40' prior: 50897659!
test09
	
	| marsRover window log |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'rf'.
	
	
	self assert: 1 equals: log size.
	self assert: '2@1' equals: log first. 
	self assert: 'Apuntando al Oeste' equals: window heading.! !

!testRun: #OLogsTests #test09 stamp: 'ERMC 6/6/2021 16:36:41'!
ERROR!

!testRun: #OLogsTests #test09 stamp: 'ERMC 6/6/2021 16:37:02'!
ERROR!

	^logs size.!

!testRun: #OLogsTests #test09 stamp: 'ERMC 6/6/2021 16:37:44'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 16:38:52'!
first
	
	^logs first! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'ERMC 6/6/2021 17:17:39'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head log positionLog headingLog positionWindow headingWindow positionObservers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'moving' stamp: 'ERMC 6/6/2021 17:17:38' prior: 50896905!
changePositionTo: newPosition

	position  _ newPosition.
	
	positionObservers do: [positionLog positionChangeTo: position]! !
!MarsRover methodsFor: 'moving' stamp: 'ERMC 6/6/2021 17:19:28' prior: 50897696!
moveEast
	
	self changePositionTo: position + (1@0).! !
!MarsRover methodsFor: 'moving' stamp: 'ERMC 6/6/2021 17:19:44' prior: 50895199!
moveWest
	
	self changePositionTo: position + (-1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'ERMC 6/6/2021 17:20:26' prior: 50897741!
changePositionTo: newPosition

	position  _ newPosition.
	
	positionObservers do: [:aLog | aLog positionChangeTo: position]! !

Object subclass: #MarsRover
	instanceVariableNames: 'position head log headingLog headingWindow positionObservers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'ERMC 6/6/2021 17:21:08'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head log headingLog headingWindow positionObservers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'ERMC 6/6/2021 17:23:06'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head log headingLog headingWindow positionObservers headingObservers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'heading' stamp: 'ERMC 6/6/2021 17:23:03' prior: 50896977!
changeHeadTo: newHeading

	head _ newHeading.
	
	headingObservers _ [:aLog | aLog headingChangedTo: head]
 ! !
!MarsRover methodsFor: 'heading' stamp: 'ERMC 6/6/2021 17:23:42' prior: 50897676!
headEast
	
	self changeHeadTo: MarsRoverHeadingEast new.

! !

Object subclass: #MarsRover
	instanceVariableNames: 'position head positionObservers headingObservers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'ERMC 6/6/2021 17:24:29'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionObservers headingObservers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!methodRemoval: MarsRover #addLog: stamp: 'ERMC 6/6/2021 17:24:32'!
addLog: aLog 
	
	log _ aLog!

!methodRemoval: MarsRover #addLogToHeading: stamp: 'ERMC 6/6/2021 17:24:39'!
addLogToHeading: aLog 
	
	headingLog _ aLog.!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 17:25:08'!
addLogToHeading: aLog 
	
	headingObservers _ aLog! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 17:25:14' prior: 50895685!
addLogToPosition: aLog 
	
	headingObservers _ aLog! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 17:25:25' prior: 50896610!
addWindowToHeading: aMarsRoverStateWindow 
	
	headingObservers _ aMarsRoverStateWindow ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 17:25:59' prior: 50896311!
addWindowToPosition: aMarsRoverStateWindow 
	
	positionObservers _ aMarsRoverStateWindow ! !

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 17:26:02'!
ERROR!

!testRun: #OLogsTests #test02WhenMarsRoverMoveBackwardLogsPositionChange stamp: 'ERMC 6/6/2021 17:26:02'!
ERROR!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 17:26:02'!
FAILURE!

!testRun: #OLogsTests #test04WhenMarsRoverRotateLeftLogsHeadingChange stamp: 'ERMC 6/6/2021 17:26:02'!
FAILURE!

!testRun: #OLogsTests #test05WindowLogsPositionChange stamp: 'ERMC 6/6/2021 17:26:02'!
ERROR!

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 17:26:02'!
ERROR!

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 17:26:02'!
FAILURE!

!testRun: #OLogsTests #test08WindowLogsHeadingChangeRotateLeft stamp: 'ERMC 6/6/2021 17:26:02'!
FAILURE!

!testRun: #OLogsTests #test09 stamp: 'ERMC 6/6/2021 17:26:02'!
ERROR!

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 17:26:12'!
ERROR!

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 17:26:44'!
ERROR!

!testRun: #OLogsTests #test02WhenMarsRoverMoveBackwardLogsPositionChange stamp: 'ERMC 6/6/2021 17:26:44'!
ERROR!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 17:26:44'!
FAILURE!

!testRun: #OLogsTests #test04WhenMarsRoverRotateLeftLogsHeadingChange stamp: 'ERMC 6/6/2021 17:26:44'!
FAILURE!

!testRun: #OLogsTests #test05WindowLogsPositionChange stamp: 'ERMC 6/6/2021 17:26:44'!
ERROR!

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 17:26:44'!
ERROR!

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 17:26:44'!
FAILURE!

!testRun: #OLogsTests #test08WindowLogsHeadingChangeRotateLeft stamp: 'ERMC 6/6/2021 17:26:44'!
FAILURE!

!testRun: #OLogsTests #test09 stamp: 'ERMC 6/6/2021 17:26:44'!
ERROR!

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 17:26:46'!
ERROR!
!MarsRover methodsFor: 'initialization' stamp: 'ERMC 6/6/2021 17:31:27' prior: 50895128!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading.
	
	positionObservers _ OrderedCollection new.! !

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 17:31:31'!
FAILURE!

!testRun: #OLogsTests #test02WhenMarsRoverMoveBackwardLogsPositionChange stamp: 'ERMC 6/6/2021 17:31:31'!
FAILURE!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 17:31:31'!
FAILURE!

!testRun: #OLogsTests #test04WhenMarsRoverRotateLeftLogsHeadingChange stamp: 'ERMC 6/6/2021 17:31:31'!
FAILURE!

!testRun: #OLogsTests #test05WindowLogsPositionChange stamp: 'ERMC 6/6/2021 17:31:31'!
ERROR!

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 17:31:31'!
ERROR!

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 17:31:31'!
FAILURE!

!testRun: #OLogsTests #test08WindowLogsHeadingChangeRotateLeft stamp: 'ERMC 6/6/2021 17:31:31'!
FAILURE!

!testRun: #OLogsTests #test09 stamp: 'ERMC 6/6/2021 17:31:31'!
FAILURE!
!MarsRover methodsFor: 'initialization' stamp: 'ERMC 6/6/2021 17:31:47' prior: 50897911!
initializeAt: aPosition heading: aHeading

	position := aPosition.
	head := aHeading.
	
	positionObservers _ OrderedCollection new.
	headingObservers _ OrderedCollection new.! !

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 17:31:49'!
FAILURE!

!testRun: #OLogsTests #test02WhenMarsRoverMoveBackwardLogsPositionChange stamp: 'ERMC 6/6/2021 17:31:49'!
FAILURE!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 17:31:49'!
FAILURE!

!testRun: #OLogsTests #test04WhenMarsRoverRotateLeftLogsHeadingChange stamp: 'ERMC 6/6/2021 17:31:49'!
FAILURE!

!testRun: #OLogsTests #test05WindowLogsPositionChange stamp: 'ERMC 6/6/2021 17:31:49'!
ERROR!

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 17:31:49'!
ERROR!

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 17:31:49'!
FAILURE!

!testRun: #OLogsTests #test08WindowLogsHeadingChangeRotateLeft stamp: 'ERMC 6/6/2021 17:31:49'!
FAILURE!

!testRun: #OLogsTests #test09 stamp: 'ERMC 6/6/2021 17:31:49'!
FAILURE!

!testRun: #OLogsTests #test05WindowLogsPositionChange stamp: 'ERMC 6/6/2021 17:31:52'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 17:33:07' prior: 50897839!
addWindowToPosition: aMarsRoverStateWindow 
	
	positionObservers add: aMarsRoverStateWindow ! !

!testRun: #OLogsTests #test05WindowLogsPositionChange stamp: 'ERMC 6/6/2021 17:33:08'!
PASSED!

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 17:33:10'!
PASSED!

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 17:33:10'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 17:33:24' prior: 50897828!
addLogToPosition: aLog 
	
	headingObservers add: aLog! !

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 17:33:25'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 17:33:53' prior: 50898005!
addLogToPosition: aLog 
	
	positionObservers add: aLog! !

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 17:33:54'!
PASSED!

!testRun: #OLogsTests #test02WhenMarsRoverMoveBackwardLogsPositionChange stamp: 'ERMC 6/6/2021 17:33:55'!
PASSED!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 17:33:55'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 17:35:04' prior: 50897833!
addWindowToHeading: aMarsRoverStateWindow 
	
	headingObservers add: aMarsRoverStateWindow ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 17:35:10' prior: 50897823!
addLogToHeading: aLog 
	
	headingObservers add: aLog! !

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 17:35:35'!
FAILURE!

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 17:35:42'!
PASSED!

!testRun: #OLogsTests #test02WhenMarsRoverMoveBackwardLogsPositionChange stamp: 'ERMC 6/6/2021 17:35:42'!
PASSED!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 17:35:42'!
FAILURE!

!testRun: #OLogsTests #test04WhenMarsRoverRotateLeftLogsHeadingChange stamp: 'ERMC 6/6/2021 17:35:42'!
FAILURE!

!testRun: #OLogsTests #test05WindowLogsPositionChange stamp: 'ERMC 6/6/2021 17:35:42'!
PASSED!

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 17:35:42'!
PASSED!

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 17:35:42'!
FAILURE!

!testRun: #OLogsTests #test08WindowLogsHeadingChangeRotateLeft stamp: 'ERMC 6/6/2021 17:35:42'!
FAILURE!

!testRun: #OLogsTests #test09 stamp: 'ERMC 6/6/2021 17:35:42'!
FAILURE!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 17:35:44'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'ERMC 6/6/2021 17:37:39' prior: 50897790!
changeHeadTo: newHeading

	head _ newHeading.
	
	headingObservers do: [:aLog | aLog headingChangedTo: head]
 ! !

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 17:37:40'!
ERROR!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 17:39:38'!
FAILURE!

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 17:39:48'!
PASSED!

!testRun: #OLogsTests #test02WhenMarsRoverMoveBackwardLogsPositionChange stamp: 'ERMC 6/6/2021 17:39:48'!
PASSED!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 17:39:48'!
PASSED!

!testRun: #OLogsTests #test04WhenMarsRoverRotateLeftLogsHeadingChange stamp: 'ERMC 6/6/2021 17:39:48'!
PASSED!

!testRun: #OLogsTests #test05WindowLogsPositionChange stamp: 'ERMC 6/6/2021 17:39:48'!
PASSED!

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 17:39:48'!
PASSED!

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 17:39:48'!
PASSED!

!testRun: #OLogsTests #test08WindowLogsHeadingChangeRotateLeft stamp: 'ERMC 6/6/2021 17:39:48'!
PASSED!

!testRun: #OLogsTests #test09 stamp: 'ERMC 6/6/2021 17:39:48'!
FAILURE!

!testRun: #OLogsTests #test09 stamp: 'ERMC 6/6/2021 17:39:48'!
FAILURE!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 17:40:43' prior: 50897705!
test09
	
	| marsRover window log |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'rf'.
	
	
	self assert: 1 equals: log size.
	self assert: '2@1' equals: log first. 
	self assert: 'Apuntando al Este' equals: window heading.! !

!testRun: #OLogsTests #test09 stamp: 'ERMC 6/6/2021 17:40:45'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #OLogsTests #test02WhenMarsRoverMoveBackwardLogsPositionChange stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #OLogsTests #test04WhenMarsRoverRotateLeftLogsHeadingChange stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #OLogsTests #test05WindowLogsPositionChange stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #OLogsTests #test08WindowLogsHeadingChangeRotateLeft stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!

!testRun: #OLogsTests #test09 stamp: 'ERMC 6/6/2021 17:40:49'!
PASSED!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 17:43:10' prior: 50898123!
test09
	
	| marsRover window log |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'rf'.
	
	
	self assert: 1 equals: log size.
	self assert: '2@1' equals: log first. 
	self assert: 'Apuntando al Este' equals: window heading.! !
!Behavior method!
at: aPosition heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{43 to: 46}) new ] valueCoveringAll:
		{48 to: 50})
		initializeAt:
			(aPosition
				cover: (66 to: 74)
				declaredAt: (5 to: 13))
		heading:
			([
			(MarsRoverHeading
				cover: (86 to: 101)
				declaredAt: (86 to: 101)) heading:
				(aCardinalPoint
					cover: (112 to: 125)
					declaredAt: (24 to: 37)) ] valueCoveringAll:
				{103 to: 110}) ] valueCoveringAll:
		{52 to: 64. 76 to: 83}.! !
!Behavior method!
heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{28 to: 31}) subclasses ] valueCoveringAll:
		{33 to: 42})
		detect: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (84 to: 106)
				declaredAt: (58 to: 80)) isFor:
				(aCardinalPoint
					cover: (115 to: 128)
					declaredAt: (10 to: 23)) ] valueCoveringAll:
				{108 to: 113} ]
		ifFound: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (172 to: 194)
				declaredAt: (146 to: 168)) new ] valueCoveringAll:
				{196 to: 198} ]
		ifNone: [
			[
			(self coverAll:
				{214 to: 217}) error:
				([
				(MarsRover
					cover: (226 to: 234)
					declaredAt: (226 to: 234)) invalidCardinalPointErrorDescription ] valueCoveringAll:
					{236 to: 271}) ] valueCoveringAll:
				{219 to: 224} ]] valueCoveringAll:
		{47 to: 53. 134 to: 141. 204 to: 210}.! !
!Behavior method!
isFor: aCardinalPoint
	^ [
	([
	(self coverAll:
		{26 to: 29}) cardinalPoint ] valueCoveringAll:
		{31 to: 43}) =
		(aCardinalPoint
			cover: (47 to: 60)
			declaredAt: (8 to: 21)) ] valueCoveringAll:
		{45 to: 45}.! !
!Behavior method!
cardinalPoint
	^ #East coverAll:
		{18 to: 22}.! !
!Behavior method!
cardinalPoint
	^ #North coverAll:
		{18 to: 23}.! !
!Behavior method!
initializeAt: aPosition heading: aHeading
	(position _ aPosition
		cover: (57 to: 65)
		declaredAt: (15 to: 23))
		cover: (45 to: 52)
		declaredAt: (45 to: 52).
	(head _ aHeading
		cover: (77 to: 84)
		declaredAt: (34 to: 41))
		cover: (69 to: 72)
		declaredAt: (69 to: 72).
	(positionObservers _ [
	(OrderedCollection
		cover: (110 to: 126)
		declaredAt: (110 to: 126)) new ] valueCoveringAll:
		{128 to: 130})
		cover: (90 to: 106)
		declaredAt: (90 to: 106).
	(headingObservers _ [
	(OrderedCollection
		cover: (153 to: 169)
		declaredAt: (110 to: 126)) new ] valueCoveringAll:
		{171 to: 173})
		cover: (134 to: 149)
		declaredAt: (134 to: 149).! !
!Behavior method!
process: aSequenceOfCommands
	[
	(aSequenceOfCommands
		cover: (32 to: 50)
		declaredAt: (10 to: 28)) do: [ :aCommand |
		[
		(self coverAll:
			{69 to: 72}) processCommand:
			(aCommand
				cover: (90 to: 97)
				declaredAt: (58 to: 65)) ] valueCoveringAll:
			{74 to: 88} ]] valueCoveringAll:
		{52 to: 54}.! !
!Behavior method!
isAt: aPosition heading: aCardinalPoint
	^ [
	([
	(position
		cover: (44 to: 51)
		declaredAt: (44 to: 51)) =
		(aPosition
			cover: (55 to: 63)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{53 to: 53}) and: [
		[
		(head
			cover: (72 to: 75)
			declaredAt: (72 to: 75)) isHeading:
			(aCardinalPoint
				cover: (88 to: 101)
				declaredAt: (26 to: 39)) ] valueCoveringAll:
			{77 to: 86} ]] valueCoveringAll:
		{65 to: 68}.! !
!Behavior method!
isHeading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{30 to: 33}) class ] valueCoveringAll:
		{35 to: 39}) isFor:
		(aCardinalPoint
			cover: (48 to: 61)
			declaredAt: (12 to: 25)) ] valueCoveringAll:
		{41 to: 46}.! !

!testRun: #MarsRoverTest #test01 stamp: 'ERMC 6/6/2021 17:44:55'!
PASSED!
!Behavior method!
processCommand: aCommand
	[
	([
	(self coverAll:
		{29 to: 32}) isForwardCommand:
		(aCommand
			cover: (52 to: 59)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{34 to: 50}) ifTrue: [ ^ [
		(self coverAll:
			{74 to: 77}) moveForward ] valueCoveringAll:
			{79 to: 89} ]] valueCoveringAll:
		{62 to: 68}.
	[
	([
	(self coverAll:
		{96 to: 99}) isBackwardCommand:
		(aCommand
			cover: (120 to: 127)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{101 to: 118}) ifTrue: [ ^ [
		(self coverAll:
			{142 to: 145}) moveBackward ] valueCoveringAll:
			{147 to: 158} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(self coverAll:
		{165 to: 168}) isRotateRightCommand:
		(aCommand
			cover: (192 to: 199)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{170 to: 190}) ifTrue: [ ^ [
		(self coverAll:
			{214 to: 217}) rotateRight ] valueCoveringAll:
			{219 to: 229} ]] valueCoveringAll:
		{202 to: 208}.
	[
	([
	(self coverAll:
		{236 to: 239}) isRotateLeftCommand:
		(aCommand
			cover: (262 to: 269)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{241 to: 260}) ifTrue: [ ^ [
		(self coverAll:
			{284 to: 287}) rotateLeft ] valueCoveringAll:
			{289 to: 298} ]] valueCoveringAll:
		{272 to: 278}.
	[
	(self coverAll:
		{305 to: 308}) signalInvalidCommand ] valueCoveringAll:
		{310 to: 329}.! !
!Behavior method!
isForwardCommand: aCommand
	^ [
	(aCommand
		cover: (31 to: 38)
		declaredAt: (19 to: 26)) =
		($f coverAll:
			{42 to: 43}) ] valueCoveringAll:
		{40 to: 40}.! !
!Behavior method!
moveForward
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) moveForward:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.! !
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveNorth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
moveNorth
	[
	(self coverAll:
		{14 to: 17}) changePositionTo:
		([
		(position
			cover: (37 to: 44)
			declaredAt: (37 to: 44)) +
			([
			(0 coverAll:
				{49 to: 49}) @
				(1 coverAll:
					{51 to: 51}) ] valueCoveringAll:
				{50 to: 50}) ] valueCoveringAll:
			{46 to: 46}) ] valueCoveringAll:
		{19 to: 35}.! !
!Behavior method!
changePositionTo: newPosition
	(position _ newPosition
		cover: (45 to: 55)
		declaredAt: (19 to: 29))
		cover: (33 to: 40)
		declaredAt: (33 to: 40).
	[
	(positionObservers
		cover: (61 to: 77)
		declaredAt: (61 to: 77)) do: [ :aLog |
		[
		(aLog
			cover: (92 to: 95)
			declaredAt: (85 to: 88)) positionChangeTo:
			(position
				cover: (115 to: 122)
				declaredAt: (33 to: 40)) ] valueCoveringAll:
			{97 to: 113} ]] valueCoveringAll:
		{79 to: 81}.! !

!testRun: #MarsRoverTest #test02 stamp: 'ERMC 6/6/2021 17:44:55'!
PASSED!
!Behavior method!
isBackwardCommand: aCommand
	^ [
	(aCommand
		cover: (32 to: 39)
		declaredAt: (20 to: 27)) =
		($b coverAll:
			{43 to: 44}) ] valueCoveringAll:
		{41 to: 41}.! !
!Behavior method!
moveBackward
	[
	(head
		cover: (17 to: 20)
		declaredAt: (17 to: 20)) moveBackward:
		(self coverAll:
			{36 to: 39}) ] valueCoveringAll:
		{22 to: 34}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveSouth ] valueCoveringAll:
		{41 to: 49}.! !
!Behavior method!
moveSouth
	[
	(self coverAll:
		{14 to: 17}) changePositionTo:
		([
		(position
			cover: (37 to: 44)
			declaredAt: (37 to: 44)) +
			([
			(0 coverAll:
				{49 to: 49}) @
				(-1 coverAll:
					{51 to: 52}) ] valueCoveringAll:
				{50 to: 50}) ] valueCoveringAll:
			{46 to: 46}) ] valueCoveringAll:
		{19 to: 35}.! !

!testRun: #MarsRoverTest #test03 stamp: 'ERMC 6/6/2021 17:44:55'!
PASSED!
!Behavior method!
isRotateRightCommand: aCommand
	^ [
	(aCommand
		cover: (35 to: 42)
		declaredAt: (23 to: 30)) =
		($r coverAll:
			{46 to: 47}) ] valueCoveringAll:
		{44 to: 44}.! !
!Behavior method!
rotateRight
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) rotateRight:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
headEast
	[
	(self coverAll:
		{13 to: 16}) changeHeadTo:
		([
		(MarsRoverHeadingEast
			cover: (32 to: 51)
			declaredAt: (32 to: 51)) new ] valueCoveringAll:
			{53 to: 55}) ] valueCoveringAll:
		{18 to: 30}.! !
!Behavior method!
changeHeadTo: newHeading
	(head _ newHeading
		cover: (35 to: 44)
		declaredAt: (15 to: 24))
		cover: (28 to: 31)
		declaredAt: (28 to: 31).
	[
	(headingObservers
		cover: (50 to: 65)
		declaredAt: (50 to: 65)) do: [ :aLog |
		[
		(aLog
			cover: (80 to: 83)
			declaredAt: (73 to: 76)) headingChangedTo:
			(head
				cover: (103 to: 106)
				declaredAt: (28 to: 31)) ] valueCoveringAll:
			{85 to: 101} ]] valueCoveringAll:
		{67 to: 69}.! !

!testRun: #MarsRoverTest #test04 stamp: 'ERMC 6/6/2021 17:44:55'!
PASSED!
!Behavior method!
isRotateLeftCommand: aCommand
	^ [
	(aCommand
		cover: (34 to: 41)
		declaredAt: (22 to: 29)) =
		($l coverAll:
			{45 to: 46}) ] valueCoveringAll:
		{43 to: 43}.! !
!Behavior method!
rotateLeft
	[
	(head
		cover: (15 to: 18)
		declaredAt: (15 to: 18)) rotateLeft:
		(self coverAll:
			{32 to: 35}) ] valueCoveringAll:
		{20 to: 30}.! !
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headWest ] valueCoveringAll:
		{39 to: 46}.! !
!Behavior method!
headWest
	[
	(self coverAll:
		{13 to: 16}) changeHeadTo:
		([
		(MarsRoverHeadingWest
			cover: (32 to: 51)
			declaredAt: (32 to: 51)) new ] valueCoveringAll:
			{53 to: 55}) ] valueCoveringAll:
		{18 to: 30}.! !
!Behavior method!
cardinalPoint
	^ #West coverAll:
		{18 to: 22}.! !

!testRun: #MarsRoverTest #test05 stamp: 'ERMC 6/6/2021 17:44:55'!
PASSED!
!Behavior method!
signalInvalidCommand
	[
	(self coverAll:
		{25 to: 28}) error:
		([
		(self coverAll:
			{37 to: 40}) invalidCommandErrorDescription ] valueCoveringAll:
			{42 to: 71}) ] valueCoveringAll:
		{30 to: 35}.! !
!Behavior method!
invalidCommandErrorDescription
	^ 'Invalid command' coverAll:
		{36 to: 52}.! !

!testRun: #MarsRoverTest #test06 stamp: 'ERMC 6/6/2021 17:44:55'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ERMC 6/6/2021 17:44:55'!
PASSED!
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
moveEast
	[
	(self coverAll:
		{13 to: 16}) changePositionTo:
		([
		(position
			cover: (36 to: 43)
			declaredAt: (36 to: 43)) +
			([
			(1 coverAll:
				{48 to: 48}) @
				(0 coverAll:
					{50 to: 50}) ] valueCoveringAll:
				{49 to: 49}) ] valueCoveringAll:
			{45 to: 45}) ] valueCoveringAll:
		{18 to: 34}.! !

!testRun: #MarsRoverTest #test08 stamp: 'ERMC 6/6/2021 17:44:55'!
PASSED!
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveWest ] valueCoveringAll:
		{41 to: 48}.! !
!Behavior method!
moveWest
	[
	(self coverAll:
		{13 to: 16}) changePositionTo:
		([
		(position
			cover: (36 to: 43)
			declaredAt: (36 to: 43)) +
			([
			(-1 coverAll:
				{48 to: 49}) @
				(0 coverAll:
					{51 to: 51}) ] valueCoveringAll:
				{50 to: 50}) ] valueCoveringAll:
			{45 to: 45}) ] valueCoveringAll:
		{18 to: 34}.! !

!testRun: #MarsRoverTest #test09 stamp: 'ERMC 6/6/2021 17:44:55'!
PASSED!
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headSouth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
headSouth
	[
	(self coverAll:
		{15 to: 18}) changeHeadTo:
		([
		(MarsRoverHeadingSouth
			cover: (34 to: 54)
			declaredAt: (34 to: 54)) new ] valueCoveringAll:
			{56 to: 58}) ] valueCoveringAll:
		{20 to: 32}.! !
!Behavior method!
cardinalPoint
	^ #South coverAll:
		{18 to: 23}.! !

!testRun: #MarsRoverTest #test10 stamp: 'ERMC 6/6/2021 17:44:55'!
PASSED!
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headNorth ] valueCoveringAll:
		{39 to: 47}.! !
!Behavior method!
headNorth
	(head _ [
	(MarsRoverHeadingNorth
		cover: (22 to: 42)
		declaredAt: (22 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 17)
		declaredAt: (14 to: 17).! !

!testRun: #MarsRoverTest #test11 stamp: 'ERMC 6/6/2021 17:44:55'!
PASSED!
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveSouth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveNorth ] valueCoveringAll:
		{41 to: 49}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headWest ] valueCoveringAll:
		{40 to: 47}.! !

!testRun: #MarsRoverTest #test12 stamp: 'ERMC 6/6/2021 17:44:55'!
PASSED!
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headEast ] valueCoveringAll:
		{39 to: 46}.! !

!testRun: #MarsRoverTest #test13 stamp: 'ERMC 6/6/2021 17:44:55'!
PASSED!
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveWest ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (15 to: 24)) moveEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headNorth ] valueCoveringAll:
		{40 to: 48}.! !

!testRun: #MarsRoverTest #test14 stamp: 'ERMC 6/6/2021 17:44:55'!
PASSED!
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headSouth ] valueCoveringAll:
		{39 to: 47}.! !

!testRun: #MarsRoverTest #test15 stamp: 'ERMC 6/6/2021 17:44:55'!
PASSED!
!Behavior method!
invalidCardinalPointErrorDescription
	^ 'Invalid cardinal point' coverAll:
		{42 to: 65}.! !

!testRun: #MarsRoverTest #test16 stamp: 'ERMC 6/6/2021 17:44:55'!
PASSED!
!MarsRover methodsFor: 'moving' stamp: 'ERMC 6/6/2021 16:35:23' prior: 50897748!
moveEast
	
	position := position + (1@0).
	headingLog ifNotNil: [headingLog positionChangeTo: position]! !
!MarsRover methodsFor: 'moving' stamp: 'ERMC 6/6/2021 17:19:44' prior: 50897753!
moveWest
	
	self changePositionTo: position + (-1@0)! !
!Behavior method!
at: aPosition heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{43 to: 46}) new ] valueCoveringAll:
		{48 to: 50})
		initializeAt:
			(aPosition
				cover: (66 to: 74)
				declaredAt: (5 to: 13))
		heading:
			([
			(MarsRoverHeading
				cover: (86 to: 101)
				declaredAt: (86 to: 101)) heading:
				(aCardinalPoint
					cover: (112 to: 125)
					declaredAt: (24 to: 37)) ] valueCoveringAll:
				{103 to: 110}) ] valueCoveringAll:
		{52 to: 64. 76 to: 83}.! !
!Behavior method!
heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{28 to: 31}) subclasses ] valueCoveringAll:
		{33 to: 42})
		detect: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (84 to: 106)
				declaredAt: (58 to: 80)) isFor:
				(aCardinalPoint
					cover: (115 to: 128)
					declaredAt: (10 to: 23)) ] valueCoveringAll:
				{108 to: 113} ]
		ifFound: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (172 to: 194)
				declaredAt: (146 to: 168)) new ] valueCoveringAll:
				{196 to: 198} ]
		ifNone: [
			[
			(self coverAll:
				{214 to: 217}) error:
				([
				(MarsRover
					cover: (226 to: 234)
					declaredAt: (226 to: 234)) invalidCardinalPointErrorDescription ] valueCoveringAll:
					{236 to: 271}) ] valueCoveringAll:
				{219 to: 224} ]] valueCoveringAll:
		{47 to: 53. 134 to: 141. 204 to: 210}.! !
!Behavior method!
isFor: aCardinalPoint
	^ [
	([
	(self coverAll:
		{26 to: 29}) cardinalPoint ] valueCoveringAll:
		{31 to: 43}) =
		(aCardinalPoint
			cover: (47 to: 60)
			declaredAt: (8 to: 21)) ] valueCoveringAll:
		{45 to: 45}.! !
!Behavior method!
cardinalPoint
	^ #East coverAll:
		{18 to: 22}.! !
!Behavior method!
cardinalPoint
	^ #North coverAll:
		{18 to: 23}.! !
!Behavior method!
initializeAt: aPosition heading: aHeading
	(position _ aPosition
		cover: (57 to: 65)
		declaredAt: (15 to: 23))
		cover: (45 to: 52)
		declaredAt: (45 to: 52).
	(head _ aHeading
		cover: (77 to: 84)
		declaredAt: (34 to: 41))
		cover: (69 to: 72)
		declaredAt: (69 to: 72).
	(positionObservers _ [
	(OrderedCollection
		cover: (110 to: 126)
		declaredAt: (110 to: 126)) new ] valueCoveringAll:
		{128 to: 130})
		cover: (90 to: 106)
		declaredAt: (90 to: 106).
	(headingObservers _ [
	(OrderedCollection
		cover: (153 to: 169)
		declaredAt: (110 to: 126)) new ] valueCoveringAll:
		{171 to: 173})
		cover: (134 to: 149)
		declaredAt: (134 to: 149).! !
!Behavior method!
process: aSequenceOfCommands
	[
	(aSequenceOfCommands
		cover: (32 to: 50)
		declaredAt: (10 to: 28)) do: [ :aCommand |
		[
		(self coverAll:
			{69 to: 72}) processCommand:
			(aCommand
				cover: (90 to: 97)
				declaredAt: (58 to: 65)) ] valueCoveringAll:
			{74 to: 88} ]] valueCoveringAll:
		{52 to: 54}.! !
!Behavior method!
isAt: aPosition heading: aCardinalPoint
	^ [
	([
	(position
		cover: (44 to: 51)
		declaredAt: (44 to: 51)) =
		(aPosition
			cover: (55 to: 63)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{53 to: 53}) and: [
		[
		(head
			cover: (72 to: 75)
			declaredAt: (72 to: 75)) isHeading:
			(aCardinalPoint
				cover: (88 to: 101)
				declaredAt: (26 to: 39)) ] valueCoveringAll:
			{77 to: 86} ]] valueCoveringAll:
		{65 to: 68}.! !
!Behavior method!
isHeading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{30 to: 33}) class ] valueCoveringAll:
		{35 to: 39}) isFor:
		(aCardinalPoint
			cover: (48 to: 61)
			declaredAt: (12 to: 25)) ] valueCoveringAll:
		{41 to: 46}.! !

!testRun: #MarsRoverTest #test01 stamp: 'ERMC 6/6/2021 17:47:56'!
PASSED!
!Behavior method!
processCommand: aCommand
	[
	([
	(self coverAll:
		{29 to: 32}) isForwardCommand:
		(aCommand
			cover: (52 to: 59)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{34 to: 50}) ifTrue: [ ^ [
		(self coverAll:
			{74 to: 77}) moveForward ] valueCoveringAll:
			{79 to: 89} ]] valueCoveringAll:
		{62 to: 68}.
	[
	([
	(self coverAll:
		{96 to: 99}) isBackwardCommand:
		(aCommand
			cover: (120 to: 127)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{101 to: 118}) ifTrue: [ ^ [
		(self coverAll:
			{142 to: 145}) moveBackward ] valueCoveringAll:
			{147 to: 158} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(self coverAll:
		{165 to: 168}) isRotateRightCommand:
		(aCommand
			cover: (192 to: 199)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{170 to: 190}) ifTrue: [ ^ [
		(self coverAll:
			{214 to: 217}) rotateRight ] valueCoveringAll:
			{219 to: 229} ]] valueCoveringAll:
		{202 to: 208}.
	[
	([
	(self coverAll:
		{236 to: 239}) isRotateLeftCommand:
		(aCommand
			cover: (262 to: 269)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{241 to: 260}) ifTrue: [ ^ [
		(self coverAll:
			{284 to: 287}) rotateLeft ] valueCoveringAll:
			{289 to: 298} ]] valueCoveringAll:
		{272 to: 278}.
	[
	(self coverAll:
		{305 to: 308}) signalInvalidCommand ] valueCoveringAll:
		{310 to: 329}.! !
!Behavior method!
isForwardCommand: aCommand
	^ [
	(aCommand
		cover: (31 to: 38)
		declaredAt: (19 to: 26)) =
		($f coverAll:
			{42 to: 43}) ] valueCoveringAll:
		{40 to: 40}.! !
!Behavior method!
moveForward
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) moveForward:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.! !
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveNorth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
moveNorth
	[
	(self coverAll:
		{14 to: 17}) changePositionTo:
		([
		(position
			cover: (37 to: 44)
			declaredAt: (37 to: 44)) +
			([
			(0 coverAll:
				{49 to: 49}) @
				(1 coverAll:
					{51 to: 51}) ] valueCoveringAll:
				{50 to: 50}) ] valueCoveringAll:
			{46 to: 46}) ] valueCoveringAll:
		{19 to: 35}.! !
!Behavior method!
changePositionTo: newPosition
	(position _ newPosition
		cover: (45 to: 55)
		declaredAt: (19 to: 29))
		cover: (33 to: 40)
		declaredAt: (33 to: 40).
	[
	(positionObservers
		cover: (61 to: 77)
		declaredAt: (61 to: 77)) do: [ :aLog |
		[
		(aLog
			cover: (92 to: 95)
			declaredAt: (85 to: 88)) positionChangeTo:
			(position
				cover: (115 to: 122)
				declaredAt: (33 to: 40)) ] valueCoveringAll:
			{97 to: 113} ]] valueCoveringAll:
		{79 to: 81}.! !

!testRun: #MarsRoverTest #test02 stamp: 'ERMC 6/6/2021 17:47:56'!
PASSED!
!Behavior method!
isBackwardCommand: aCommand
	^ [
	(aCommand
		cover: (32 to: 39)
		declaredAt: (20 to: 27)) =
		($b coverAll:
			{43 to: 44}) ] valueCoveringAll:
		{41 to: 41}.! !
!Behavior method!
moveBackward
	[
	(head
		cover: (17 to: 20)
		declaredAt: (17 to: 20)) moveBackward:
		(self coverAll:
			{36 to: 39}) ] valueCoveringAll:
		{22 to: 34}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveSouth ] valueCoveringAll:
		{41 to: 49}.! !
!Behavior method!
moveSouth
	[
	(self coverAll:
		{14 to: 17}) changePositionTo:
		([
		(position
			cover: (37 to: 44)
			declaredAt: (37 to: 44)) +
			([
			(0 coverAll:
				{49 to: 49}) @
				(-1 coverAll:
					{51 to: 52}) ] valueCoveringAll:
				{50 to: 50}) ] valueCoveringAll:
			{46 to: 46}) ] valueCoveringAll:
		{19 to: 35}.! !

!testRun: #MarsRoverTest #test03 stamp: 'ERMC 6/6/2021 17:47:56'!
PASSED!
!Behavior method!
isRotateRightCommand: aCommand
	^ [
	(aCommand
		cover: (35 to: 42)
		declaredAt: (23 to: 30)) =
		($r coverAll:
			{46 to: 47}) ] valueCoveringAll:
		{44 to: 44}.! !
!Behavior method!
rotateRight
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) rotateRight:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
headEast
	[
	(self coverAll:
		{13 to: 16}) changeHeadTo:
		([
		(MarsRoverHeadingEast
			cover: (32 to: 51)
			declaredAt: (32 to: 51)) new ] valueCoveringAll:
			{53 to: 55}) ] valueCoveringAll:
		{18 to: 30}.! !
!Behavior method!
changeHeadTo: newHeading
	(head _ newHeading
		cover: (35 to: 44)
		declaredAt: (15 to: 24))
		cover: (28 to: 31)
		declaredAt: (28 to: 31).
	[
	(headingObservers
		cover: (50 to: 65)
		declaredAt: (50 to: 65)) do: [ :aLog |
		[
		(aLog
			cover: (80 to: 83)
			declaredAt: (73 to: 76)) headingChangedTo:
			(head
				cover: (103 to: 106)
				declaredAt: (28 to: 31)) ] valueCoveringAll:
			{85 to: 101} ]] valueCoveringAll:
		{67 to: 69}.! !

!testRun: #MarsRoverTest #test04 stamp: 'ERMC 6/6/2021 17:47:56'!
PASSED!
!Behavior method!
isRotateLeftCommand: aCommand
	^ [
	(aCommand
		cover: (34 to: 41)
		declaredAt: (22 to: 29)) =
		($l coverAll:
			{45 to: 46}) ] valueCoveringAll:
		{43 to: 43}.! !
!Behavior method!
rotateLeft
	[
	(head
		cover: (15 to: 18)
		declaredAt: (15 to: 18)) rotateLeft:
		(self coverAll:
			{32 to: 35}) ] valueCoveringAll:
		{20 to: 30}.! !
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headWest ] valueCoveringAll:
		{39 to: 46}.! !
!Behavior method!
headWest
	[
	(self coverAll:
		{13 to: 16}) changeHeadTo:
		([
		(MarsRoverHeadingWest
			cover: (32 to: 51)
			declaredAt: (32 to: 51)) new ] valueCoveringAll:
			{53 to: 55}) ] valueCoveringAll:
		{18 to: 30}.! !
!Behavior method!
cardinalPoint
	^ #West coverAll:
		{18 to: 22}.! !

!testRun: #MarsRoverTest #test05 stamp: 'ERMC 6/6/2021 17:47:56'!
PASSED!
!Behavior method!
signalInvalidCommand
	[
	(self coverAll:
		{25 to: 28}) error:
		([
		(self coverAll:
			{37 to: 40}) invalidCommandErrorDescription ] valueCoveringAll:
			{42 to: 71}) ] valueCoveringAll:
		{30 to: 35}.! !
!Behavior method!
invalidCommandErrorDescription
	^ 'Invalid command' coverAll:
		{36 to: 52}.! !

!testRun: #MarsRoverTest #test06 stamp: 'ERMC 6/6/2021 17:47:56'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ERMC 6/6/2021 17:47:56'!
PASSED!
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
moveEast
	(position _ [
	(position
		cover: (13 to: 20)
		declaredAt: (13 to: 20)) +
		([
		(1 coverAll:
			{37 to: 37}) @
			(0 coverAll:
				{39 to: 39}) ] valueCoveringAll:
			{38 to: 38}) ] valueCoveringAll:
		{34 to: 34})
		cover: (25 to: 32)
		declaredAt: (13 to: 20).
	[
	(headingLog
		cover: (44 to: 53)
		declaredAt: (44 to: 53)) ifNotNil: [
		[
		(headingLog
			cover: (66 to: 75)
			declaredAt: (44 to: 53)) positionChangeTo:
			(position
				cover: (95 to: 102)
				declaredAt: (13 to: 20)) ] valueCoveringAll:
			{77 to: 93} ]] valueCoveringAll:
		{55 to: 63}.! !

!testRun: #MarsRoverTest #test08 stamp: 'ERMC 6/6/2021 17:47:56'!
PASSED!
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveWest ] valueCoveringAll:
		{41 to: 48}.! !
!Behavior method!
moveWest
	[
	(self coverAll:
		{13 to: 16}) changePositionTo:
		([
		(position
			cover: (36 to: 43)
			declaredAt: (36 to: 43)) +
			([
			(-1 coverAll:
				{48 to: 49}) @
				(0 coverAll:
					{51 to: 51}) ] valueCoveringAll:
				{50 to: 50}) ] valueCoveringAll:
			{45 to: 45}) ] valueCoveringAll:
		{18 to: 34}.! !

!testRun: #MarsRoverTest #test09 stamp: 'ERMC 6/6/2021 17:47:56'!
PASSED!
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headSouth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
headSouth
	[
	(self coverAll:
		{15 to: 18}) changeHeadTo:
		([
		(MarsRoverHeadingSouth
			cover: (34 to: 54)
			declaredAt: (34 to: 54)) new ] valueCoveringAll:
			{56 to: 58}) ] valueCoveringAll:
		{20 to: 32}.! !
!Behavior method!
cardinalPoint
	^ #South coverAll:
		{18 to: 23}.! !

!testRun: #MarsRoverTest #test10 stamp: 'ERMC 6/6/2021 17:47:56'!
PASSED!
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headNorth ] valueCoveringAll:
		{39 to: 47}.! !
!Behavior method!
headNorth
	(head _ [
	(MarsRoverHeadingNorth
		cover: (22 to: 42)
		declaredAt: (22 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 17)
		declaredAt: (14 to: 17).! !

!testRun: #MarsRoverTest #test11 stamp: 'ERMC 6/6/2021 17:47:56'!
PASSED!
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveSouth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveNorth ] valueCoveringAll:
		{41 to: 49}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headWest ] valueCoveringAll:
		{40 to: 47}.! !

!testRun: #MarsRoverTest #test12 stamp: 'ERMC 6/6/2021 17:47:56'!
PASSED!
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headEast ] valueCoveringAll:
		{39 to: 46}.! !

!testRun: #MarsRoverTest #test13 stamp: 'ERMC 6/6/2021 17:47:56'!
PASSED!
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveWest ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (15 to: 24)) moveEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headNorth ] valueCoveringAll:
		{40 to: 48}.! !

!testRun: #MarsRoverTest #test14 stamp: 'ERMC 6/6/2021 17:47:56'!
PASSED!
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headSouth ] valueCoveringAll:
		{39 to: 47}.! !

!testRun: #MarsRoverTest #test15 stamp: 'ERMC 6/6/2021 17:47:56'!
PASSED!
!Behavior method!
invalidCardinalPointErrorDescription
	^ 'Invalid cardinal point' coverAll:
		{42 to: 65}.! !

!testRun: #MarsRoverTest #test16 stamp: 'ERMC 6/6/2021 17:47:56'!
PASSED!

----STARTUP---- (6 June 2021 17:51:35) as /Users/edgardo.mosqueira/Desktop/ISW/CuisUniversity/CuisUniversity-4532.image!

!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 16:32:29' prior: 50897045!
test09
	
	| marsRover window log |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	log _ Log new.
	
	marsRover addLogToPosition: window.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'rf'.
	
	
	self assert: 1 equals: log size.
	self assert: '2@1' equals: log first. 
	self assert: 'Apuntando al Oeste' equals: window heading.! !
!MarsRover methodsFor: 'heading' stamp: 'ERMC 6/6/2021 16:33:34' prior: 50895959!
headEast
	
	head := MarsRoverHeadingEast new.
	headingLog ifNotNil: [headingLog headingChangedTo: head].
	headingWindow ifNotNil: [headingWindow headingChangedTo: head].
! !
!MarsRover methodsFor: 'moving' stamp: 'ERMC 6/6/2021 16:35:23' prior: 50895183!
moveEast
	
	position := position + (1@0).
	headingLog ifNotNil: [headingLog positionChangeTo: position]! !
!MarsRover methodsFor: 'moving' stamp: 'ERMC 6/6/2021 16:36:24' prior: 50899163!
moveEast
	
	position := position + (1@0).
	positionLog ifNotNil: [positionLog positionChangeTo: position]! !
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 16:36:40' prior: 50899140!
test09
	
	| marsRover window log |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'rf'.
	
	
	self assert: 1 equals: log size.
	self assert: '2@1' equals: log first. 
	self assert: 'Apuntando al Oeste' equals: window heading.! !
!Log methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 16:38:52'!
first
	
	^logs first! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'ERMC 6/6/2021 17:51:38'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head log positionLog headingLog positionWindow headingWindow positionObservers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'moving' stamp: 'ERMC 6/6/2021 17:17:38' prior: 50896905!
changePositionTo: newPosition

	position  _ newPosition.
	
	positionObservers do: [positionLog positionChangeTo: position]! !
!MarsRover methodsFor: 'moving' stamp: 'ERMC 6/6/2021 17:19:28' prior: 50899169!
moveEast
	
	self changePositionTo: position + (1@0).! !
!MarsRover methodsFor: 'moving' stamp: 'ERMC 6/6/2021 17:19:44' prior: 50895199!
moveWest
	
	self changePositionTo: position + (-1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'ERMC 6/6/2021 17:20:26' prior: 50899205!
changePositionTo: newPosition

	position  _ newPosition.
	
	positionObservers do: [:aLog | aLog positionChangeTo: position]! !

!classRemoval: #MarsRoverStateWindow stamp: 'ERMC 6/6/2021 17:53:08'!
Object subclass: #MarsRoverStateWindow
	instanceVariableNames: 'position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingWest stamp: 'ERMC 6/6/2021 17:53:09'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingSouth stamp: 'ERMC 6/6/2021 17:53:09'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingNorth stamp: 'ERMC 6/6/2021 17:53:09'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingEast stamp: 'ERMC 6/6/2021 17:53:09'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeading stamp: 'ERMC 6/6/2021 17:53:10'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRover stamp: 'ERMC 6/6/2021 17:53:10'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head log positionLog headingLog positionWindow headingWindow positionObservers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #Log stamp: 'ERMC 6/6/2021 17:53:10'!
Object subclass: #Log
	instanceVariableNames: 'logs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #OLogsTests stamp: 'ERMC 6/6/2021 17:53:10'!
TestCase subclass: #OLogsTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverTest stamp: 'ERMC 6/6/2021 17:53:11'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

----End fileIn of /Users/edgardo.mosqueira/Desktop/isw1-ejercicios/19-MarsRover-El regreso/MarsRover-WithHeading.st----!

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 17:53:58'!
PASSED!

!testRun: #OLogsTests #test02WhenMarsRoverMoveBackwardLogsPositionChange stamp: 'ERMC 6/6/2021 17:53:58'!
PASSED!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 17:53:58'!
PASSED!

!testRun: #OLogsTests #test04WhenMarsRoverRotateLeftLogsHeadingChange stamp: 'ERMC 6/6/2021 17:53:58'!
PASSED!

!testRun: #OLogsTests #test05WindowLogsPositionChange stamp: 'ERMC 6/6/2021 17:53:58'!
PASSED!

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 17:53:58'!
PASSED!

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 17:53:58'!
PASSED!

!testRun: #OLogsTests #test08WindowLogsHeadingChangeRotateLeft stamp: 'ERMC 6/6/2021 17:53:58'!
PASSED!

!testRun: #OLogsTests #test09 stamp: 'ERMC 6/6/2021 17:53:58'!
PASSED!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 17:56:45'!
test09LogPositionChangeWhenIsHeadingEastAndWindow
	
	| marsRover window log |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'rf'.
	
	
	self assert: 1 equals: log size.
	self assert: '2@1' equals: log first. 
	self assert: 'Apuntando al Este' equals: window heading.! !

!methodRemoval: OLogsTests #test09 stamp: 'ERMC 6/6/2021 17:56:45'!
test09
	
	| marsRover window log |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'rf'.
	
	
	self assert: 1 equals: log size.
	self assert: '2@1' equals: log first. 
	self assert: 'Apuntando al Este' equals: window heading.!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 18:03:45'!
test10
	
	| marsRover window log |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'lf'.
	
	
	self assert: 1 equals: log size.
	self assert: '1@0' equals: log first. 
	self assert: 'Apuntando al Oeste' equals: window heading.! !

!testRun: #OLogsTests #test10 stamp: 'ERMC 6/6/2021 18:03:46'!
FAILURE!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 18:04:36' prior: 50900140!
test10
	
	| marsRover window log |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'lf'.
	
	
	self assert: 1 equals: log size.
	self assert: '0@1' equals: log first. 
	self assert: 'Apuntando al Oeste' equals: window heading.! !

!testRun: #OLogsTests #test10 stamp: 'ERMC 6/6/2021 18:04:38'!
PASSED!

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 18:04:38'!
PASSED!

!testRun: #OLogsTests #test02WhenMarsRoverMoveBackwardLogsPositionChange stamp: 'ERMC 6/6/2021 18:04:38'!
PASSED!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 18:04:38'!
PASSED!

!testRun: #OLogsTests #test04WhenMarsRoverRotateLeftLogsHeadingChange stamp: 'ERMC 6/6/2021 18:04:38'!
PASSED!

!testRun: #OLogsTests #test05WindowLogsPositionChange stamp: 'ERMC 6/6/2021 18:04:38'!
PASSED!

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 18:04:38'!
PASSED!

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 18:04:38'!
PASSED!

!testRun: #OLogsTests #test08WindowLogsHeadingChangeRotateLeft stamp: 'ERMC 6/6/2021 18:04:38'!
PASSED!

!testRun: #OLogsTests #test09LogPositionChangeWhenIsHeadingEastAndWindow stamp: 'ERMC 6/6/2021 18:04:38'!
PASSED!

!testRun: #OLogsTests #test10 stamp: 'ERMC 6/6/2021 18:04:38'!
PASSED!
!Behavior method!
at: aPosition heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{43 to: 46}) new ] valueCoveringAll:
		{48 to: 50})
		initializeAt:
			(aPosition
				cover: (66 to: 74)
				declaredAt: (5 to: 13))
		heading:
			([
			(MarsRoverHeading
				cover: (86 to: 101)
				declaredAt: (86 to: 101)) heading:
				(aCardinalPoint
					cover: (112 to: 125)
					declaredAt: (24 to: 37)) ] valueCoveringAll:
				{103 to: 110}) ] valueCoveringAll:
		{52 to: 64. 76 to: 83}.! !
!Behavior method!
heading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{28 to: 31}) subclasses ] valueCoveringAll:
		{33 to: 42})
		detect: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (84 to: 106)
				declaredAt: (58 to: 80)) isFor:
				(aCardinalPoint
					cover: (115 to: 128)
					declaredAt: (10 to: 23)) ] valueCoveringAll:
				{108 to: 113} ]
		ifFound: [ :aMarsRoverPositionClass |
			[
			(aMarsRoverPositionClass
				cover: (172 to: 194)
				declaredAt: (146 to: 168)) new ] valueCoveringAll:
				{196 to: 198} ]
		ifNone: [
			[
			(self coverAll:
				{214 to: 217}) error:
				([
				(MarsRover
					cover: (226 to: 234)
					declaredAt: (226 to: 234)) invalidCardinalPointErrorDescription ] valueCoveringAll:
					{236 to: 271}) ] valueCoveringAll:
				{219 to: 224} ]] valueCoveringAll:
		{47 to: 53. 134 to: 141. 204 to: 210}.! !
!Behavior method!
isFor: aCardinalPoint
	^ [
	([
	(self coverAll:
		{26 to: 29}) cardinalPoint ] valueCoveringAll:
		{31 to: 43}) =
		(aCardinalPoint
			cover: (47 to: 60)
			declaredAt: (8 to: 21)) ] valueCoveringAll:
		{45 to: 45}.! !
!Behavior method!
cardinalPoint
	^ #East coverAll:
		{18 to: 22}.! !
!Behavior method!
cardinalPoint
	^ #North coverAll:
		{18 to: 23}.! !
!Behavior method!
initializeAt: aPosition heading: aHeading
	(position _ aPosition
		cover: (57 to: 65)
		declaredAt: (15 to: 23))
		cover: (45 to: 52)
		declaredAt: (45 to: 52).
	(head _ aHeading
		cover: (77 to: 84)
		declaredAt: (34 to: 41))
		cover: (69 to: 72)
		declaredAt: (69 to: 72).
	(positionObservers _ [
	(OrderedCollection
		cover: (110 to: 126)
		declaredAt: (110 to: 126)) new ] valueCoveringAll:
		{128 to: 130})
		cover: (90 to: 106)
		declaredAt: (90 to: 106).
	(headingObservers _ [
	(OrderedCollection
		cover: (153 to: 169)
		declaredAt: (110 to: 126)) new ] valueCoveringAll:
		{171 to: 173})
		cover: (134 to: 149)
		declaredAt: (134 to: 149).! !
!Behavior method!
process: aSequenceOfCommands
	[
	(aSequenceOfCommands
		cover: (32 to: 50)
		declaredAt: (10 to: 28)) do: [ :aCommand |
		[
		(self coverAll:
			{69 to: 72}) processCommand:
			(aCommand
				cover: (90 to: 97)
				declaredAt: (58 to: 65)) ] valueCoveringAll:
			{74 to: 88} ]] valueCoveringAll:
		{52 to: 54}.! !
!Behavior method!
isAt: aPosition heading: aCardinalPoint
	^ [
	([
	(position
		cover: (44 to: 51)
		declaredAt: (44 to: 51)) =
		(aPosition
			cover: (55 to: 63)
			declaredAt: (7 to: 15)) ] valueCoveringAll:
		{53 to: 53}) and: [
		[
		(head
			cover: (72 to: 75)
			declaredAt: (72 to: 75)) isHeading:
			(aCardinalPoint
				cover: (88 to: 101)
				declaredAt: (26 to: 39)) ] valueCoveringAll:
			{77 to: 86} ]] valueCoveringAll:
		{65 to: 68}.! !
!Behavior method!
isHeading: aCardinalPoint
	^ [
	([
	(self coverAll:
		{30 to: 33}) class ] valueCoveringAll:
		{35 to: 39}) isFor:
		(aCardinalPoint
			cover: (48 to: 61)
			declaredAt: (12 to: 25)) ] valueCoveringAll:
		{41 to: 46}.! !

!testRun: #MarsRoverTest #test01 stamp: 'ERMC 6/6/2021 18:04:45'!
PASSED!
!Behavior method!
processCommand: aCommand
	[
	([
	(self coverAll:
		{29 to: 32}) isForwardCommand:
		(aCommand
			cover: (52 to: 59)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{34 to: 50}) ifTrue: [ ^ [
		(self coverAll:
			{74 to: 77}) moveForward ] valueCoveringAll:
			{79 to: 89} ]] valueCoveringAll:
		{62 to: 68}.
	[
	([
	(self coverAll:
		{96 to: 99}) isBackwardCommand:
		(aCommand
			cover: (120 to: 127)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{101 to: 118}) ifTrue: [ ^ [
		(self coverAll:
			{142 to: 145}) moveBackward ] valueCoveringAll:
			{147 to: 158} ]] valueCoveringAll:
		{130 to: 136}.
	[
	([
	(self coverAll:
		{165 to: 168}) isRotateRightCommand:
		(aCommand
			cover: (192 to: 199)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{170 to: 190}) ifTrue: [ ^ [
		(self coverAll:
			{214 to: 217}) rotateRight ] valueCoveringAll:
			{219 to: 229} ]] valueCoveringAll:
		{202 to: 208}.
	[
	([
	(self coverAll:
		{236 to: 239}) isRotateLeftCommand:
		(aCommand
			cover: (262 to: 269)
			declaredAt: (17 to: 24)) ] valueCoveringAll:
		{241 to: 260}) ifTrue: [ ^ [
		(self coverAll:
			{284 to: 287}) rotateLeft ] valueCoveringAll:
			{289 to: 298} ]] valueCoveringAll:
		{272 to: 278}.
	[
	(self coverAll:
		{305 to: 308}) signalInvalidCommand ] valueCoveringAll:
		{310 to: 329}.! !
!Behavior method!
isForwardCommand: aCommand
	^ [
	(aCommand
		cover: (31 to: 38)
		declaredAt: (19 to: 26)) =
		($f coverAll:
			{42 to: 43}) ] valueCoveringAll:
		{40 to: 40}.! !
!Behavior method!
moveForward
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) moveForward:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.! !
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveNorth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
moveNorth
	[
	(self coverAll:
		{14 to: 17}) changePositionTo:
		([
		(position
			cover: (37 to: 44)
			declaredAt: (37 to: 44)) +
			([
			(0 coverAll:
				{49 to: 49}) @
				(1 coverAll:
					{51 to: 51}) ] valueCoveringAll:
				{50 to: 50}) ] valueCoveringAll:
			{46 to: 46}) ] valueCoveringAll:
		{19 to: 35}.! !
!Behavior method!
changePositionTo: newPosition
	(position _ newPosition
		cover: (45 to: 55)
		declaredAt: (19 to: 29))
		cover: (33 to: 40)
		declaredAt: (33 to: 40).
	[
	(positionObservers
		cover: (61 to: 77)
		declaredAt: (61 to: 77)) do: [ :aLog |
		[
		(aLog
			cover: (92 to: 95)
			declaredAt: (85 to: 88)) positionChangeTo:
			(position
				cover: (115 to: 122)
				declaredAt: (33 to: 40)) ] valueCoveringAll:
			{97 to: 113} ]] valueCoveringAll:
		{79 to: 81}.! !

!testRun: #MarsRoverTest #test02 stamp: 'ERMC 6/6/2021 18:04:46'!
PASSED!
!Behavior method!
isBackwardCommand: aCommand
	^ [
	(aCommand
		cover: (32 to: 39)
		declaredAt: (20 to: 27)) =
		($b coverAll:
			{43 to: 44}) ] valueCoveringAll:
		{41 to: 41}.! !
!Behavior method!
moveBackward
	[
	(head
		cover: (17 to: 20)
		declaredAt: (17 to: 20)) moveBackward:
		(self coverAll:
			{36 to: 39}) ] valueCoveringAll:
		{22 to: 34}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveSouth ] valueCoveringAll:
		{41 to: 49}.! !
!Behavior method!
moveSouth
	[
	(self coverAll:
		{14 to: 17}) changePositionTo:
		([
		(position
			cover: (37 to: 44)
			declaredAt: (37 to: 44)) +
			([
			(0 coverAll:
				{49 to: 49}) @
				(-1 coverAll:
					{51 to: 52}) ] valueCoveringAll:
				{50 to: 50}) ] valueCoveringAll:
			{46 to: 46}) ] valueCoveringAll:
		{19 to: 35}.! !

!testRun: #MarsRoverTest #test03 stamp: 'ERMC 6/6/2021 18:04:46'!
PASSED!
!Behavior method!
isRotateRightCommand: aCommand
	^ [
	(aCommand
		cover: (35 to: 42)
		declaredAt: (23 to: 30)) =
		($r coverAll:
			{46 to: 47}) ] valueCoveringAll:
		{44 to: 44}.! !
!Behavior method!
rotateRight
	[
	(head
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) rotateRight:
		(self coverAll:
			{34 to: 37}) ] valueCoveringAll:
		{21 to: 32}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
headEast
	[
	(self coverAll:
		{13 to: 16}) changeHeadTo:
		([
		(MarsRoverHeadingEast
			cover: (32 to: 51)
			declaredAt: (32 to: 51)) new ] valueCoveringAll:
			{53 to: 55}) ] valueCoveringAll:
		{18 to: 30}.! !
!Behavior method!
changeHeadTo: newHeading
	(head _ newHeading
		cover: (35 to: 44)
		declaredAt: (15 to: 24))
		cover: (28 to: 31)
		declaredAt: (28 to: 31).
	[
	(headingObservers
		cover: (50 to: 65)
		declaredAt: (50 to: 65)) do: [ :aLog |
		[
		(aLog
			cover: (80 to: 83)
			declaredAt: (73 to: 76)) headingChangedTo:
			(head
				cover: (103 to: 106)
				declaredAt: (28 to: 31)) ] valueCoveringAll:
			{85 to: 101} ]] valueCoveringAll:
		{67 to: 69}.! !

!testRun: #MarsRoverTest #test04 stamp: 'ERMC 6/6/2021 18:04:46'!
PASSED!
!Behavior method!
isRotateLeftCommand: aCommand
	^ [
	(aCommand
		cover: (34 to: 41)
		declaredAt: (22 to: 29)) =
		($l coverAll:
			{45 to: 46}) ] valueCoveringAll:
		{43 to: 43}.! !
!Behavior method!
rotateLeft
	[
	(head
		cover: (15 to: 18)
		declaredAt: (15 to: 18)) rotateLeft:
		(self coverAll:
			{32 to: 35}) ] valueCoveringAll:
		{20 to: 30}.! !
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headWest ] valueCoveringAll:
		{39 to: 46}.! !
!Behavior method!
headWest
	[
	(self coverAll:
		{13 to: 16}) changeHeadTo:
		([
		(MarsRoverHeadingWest
			cover: (32 to: 51)
			declaredAt: (32 to: 51)) new ] valueCoveringAll:
			{53 to: 55}) ] valueCoveringAll:
		{18 to: 30}.! !
!Behavior method!
cardinalPoint
	^ #West coverAll:
		{18 to: 22}.! !

!testRun: #MarsRoverTest #test05 stamp: 'ERMC 6/6/2021 18:04:46'!
PASSED!
!Behavior method!
signalInvalidCommand
	[
	(self coverAll:
		{25 to: 28}) error:
		([
		(self coverAll:
			{37 to: 40}) invalidCommandErrorDescription ] valueCoveringAll:
			{42 to: 71}) ] valueCoveringAll:
		{30 to: 35}.! !
!Behavior method!
invalidCommandErrorDescription
	^ 'Invalid command' coverAll:
		{36 to: 52}.! !

!testRun: #MarsRoverTest #test06 stamp: 'ERMC 6/6/2021 18:04:46'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'ERMC 6/6/2021 18:04:46'!
PASSED!
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
moveEast
	[
	(self coverAll:
		{13 to: 16}) changePositionTo:
		([
		(position
			cover: (36 to: 43)
			declaredAt: (36 to: 43)) +
			([
			(1 coverAll:
				{48 to: 48}) @
				(0 coverAll:
					{50 to: 50}) ] valueCoveringAll:
				{49 to: 49}) ] valueCoveringAll:
			{45 to: 45}) ] valueCoveringAll:
		{18 to: 34}.! !

!testRun: #MarsRoverTest #test08 stamp: 'ERMC 6/6/2021 18:04:46'!
PASSED!
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveWest ] valueCoveringAll:
		{41 to: 48}.! !
!Behavior method!
moveWest
	[
	(self coverAll:
		{13 to: 16}) changePositionTo:
		([
		(position
			cover: (36 to: 43)
			declaredAt: (36 to: 43)) +
			([
			(-1 coverAll:
				{48 to: 49}) @
				(0 coverAll:
					{51 to: 51}) ] valueCoveringAll:
				{50 to: 50}) ] valueCoveringAll:
			{45 to: 45}) ] valueCoveringAll:
		{18 to: 34}.! !

!testRun: #MarsRoverTest #test09 stamp: 'ERMC 6/6/2021 18:04:46'!
PASSED!
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headSouth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
headSouth
	[
	(self coverAll:
		{15 to: 18}) changeHeadTo:
		([
		(MarsRoverHeadingSouth
			cover: (34 to: 54)
			declaredAt: (34 to: 54)) new ] valueCoveringAll:
			{56 to: 58}) ] valueCoveringAll:
		{20 to: 32}.! !
!Behavior method!
cardinalPoint
	^ #South coverAll:
		{18 to: 23}.! !

!testRun: #MarsRoverTest #test10 stamp: 'ERMC 6/6/2021 18:04:46'!
PASSED!
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headNorth ] valueCoveringAll:
		{39 to: 47}.! !
!Behavior method!
headNorth
	(head _ [
	(MarsRoverHeadingNorth
		cover: (22 to: 42)
		declaredAt: (22 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 17)
		declaredAt: (14 to: 17).! !

!testRun: #MarsRoverTest #test11 stamp: 'ERMC 6/6/2021 18:04:46'!
PASSED!
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveSouth ] valueCoveringAll:
		{40 to: 48}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (30 to: 39)
		declaredAt: (15 to: 24)) moveNorth ] valueCoveringAll:
		{41 to: 49}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headWest ] valueCoveringAll:
		{40 to: 47}.! !

!testRun: #MarsRoverTest #test12 stamp: 'ERMC 6/6/2021 18:04:46'!
PASSED!
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headEast ] valueCoveringAll:
		{39 to: 46}.! !

!testRun: #MarsRoverTest #test13 stamp: 'ERMC 6/6/2021 18:04:46'!
PASSED!
!Behavior method!
moveForward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) moveWest ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
moveBackward: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (15 to: 24)) moveEast ] valueCoveringAll:
		{40 to: 47}.! !
!Behavior method!
rotateRight: aMarsRover
	^ [
	(aMarsRover
		cover: (29 to: 38)
		declaredAt: (14 to: 23)) headNorth ] valueCoveringAll:
		{40 to: 48}.! !

!testRun: #MarsRoverTest #test14 stamp: 'ERMC 6/6/2021 18:04:46'!
PASSED!
!Behavior method!
rotateLeft: aMarsRover
	^ [
	(aMarsRover
		cover: (28 to: 37)
		declaredAt: (13 to: 22)) headSouth ] valueCoveringAll:
		{39 to: 47}.! !

!testRun: #MarsRoverTest #test15 stamp: 'ERMC 6/6/2021 18:04:46'!
PASSED!
!Behavior method!
invalidCardinalPointErrorDescription
	^ 'Invalid cardinal point' coverAll:
		{42 to: 65}.! !

!testRun: #MarsRoverTest #test16 stamp: 'ERMC 6/6/2021 18:04:46'!
PASSED!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 18:10:50'!
test11
	
	| marsRover window log |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'frfrfrf'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: log first. 
	self assert: '2@2' equals: log first. 
	self assert: '2@1' equals: log first. 
	self assert: '1@1' equals: log first. 
	self assert: 'Apuntando al Oeste' equals: window heading.! !
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 18:11:54' prior: 50900655!
test11
	
	| marsRover window log |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'frfrfrf'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: (log at: 1). 
	self assert: '2@2' equals: (log at: 2). 
	self assert: '2@1' equals: (log at: 3). 
	self assert: '1@1' equals: (log at: 4). 
	self assert: 'Apuntando al Oeste' equals: window heading.! !
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 18:12:22'!
test11xxxCompleteSecuenceOfFowardForAllPosition
	
	| marsRover window log |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'frfrfrf'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: (log at: 1). 
	self assert: '2@2' equals: (log at: 2). 
	self assert: '2@1' equals: (log at: 3). 
	self assert: '1@1' equals: (log at: 4). 
	self assert: 'Apuntando al Oeste' equals: window heading.! !

!methodRemoval: OLogsTests #test11 stamp: 'ERMC 6/6/2021 18:12:28'!
test11
	
	| marsRover window log |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'frfrfrf'.
	
	self assert: 1 equals: log size.
	self assert: '1@2' equals: (log at: 1). 
	self assert: '2@2' equals: (log at: 2). 
	self assert: '2@1' equals: (log at: 3). 
	self assert: '1@1' equals: (log at: 4). 
	self assert: 'Apuntando al Oeste' equals: window heading.!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 18:13:07'!
test10LogPositionChangeWhenIsHeadingWestAndWindow
	
	| marsRover window log |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'lf'.
	
	
	self assert: 1 equals: log size.
	self assert: '0@1' equals: log first. 
	self assert: 'Apuntando al Oeste' equals: window heading.! !

!methodRemoval: OLogsTests #test10 stamp: 'ERMC 6/6/2021 18:13:07'!
test10
	
	| marsRover window log |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'lf'.
	
	
	self assert: 1 equals: log size.
	self assert: '0@1' equals: log first. 
	self assert: 'Apuntando al Oeste' equals: window heading.!

!testRun: #OLogsTests #test11xxxCompleteSecuenceOfFowardForAllPosition stamp: 'ERMC 6/6/2021 18:13:11'!
FAILURE!
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 18:13:18' prior: 50900693!
test11xxxCompleteSecuenceOfFowardForAllPosition
	
	| marsRover window log |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'frfrfrf'.
	
	self assert: 4 equals: log size.
	self assert: '1@2' equals: (log at: 1). 
	self assert: '2@2' equals: (log at: 2). 
	self assert: '2@1' equals: (log at: 3). 
	self assert: '1@1' equals: (log at: 4). 
	self assert: 'Apuntando al Oeste' equals: window heading.! !

!testRun: #OLogsTests #test11xxxCompleteSecuenceOfFowardForAllPosition stamp: 'ERMC 6/6/2021 18:13:19'!
ERROR!

!testRun: #OLogsTests #test11xxxCompleteSecuenceOfFowardForAllPosition stamp: 'ERMC 6/6/2021 18:13:31'!
ERROR!
!Log methodsFor: 'error handling' stamp: 'ERMC 6/6/2021 18:13:36' overrides: 16881409!
error: aString 
	self shouldBeImplemented.! !

!methodRemoval: Log #error: stamp: 'ERMC 6/6/2021 18:14:15'!
error: aString 
	self shouldBeImplemented.!
!Log methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 18:14:29' overrides: 16880774!
at: anIndex
	
	^logs at: anIndex.! !
!OLogsTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 18:16:33' prior: 50900765!
test11xxxCompleteSecuenceOfFowardForAllPosition
	
	| marsRover window log |
	marsRover _ MarsRover at: 1@1 heading: #North.
	
	window _ MarsRoverStateWindow new.
	log _ Log new.
	
	marsRover addLogToPosition: log.
	marsRover addWindowToHeading: window.
	
	marsRover process: 'frfrfrf'.
	
	self assert: 4 equals: log size.
	self assert: (log has: '1@2' at: 1).
	self assert: (log has: '2@2' at: 2). 
	self assert: (log has: '2@1' at: 3).
	self assert: (log has: '1@1' at: 4).
	self assert: 'Apuntando al Oeste' equals: window heading.! !

!testRun: #OLogsTests #test11xxxCompleteSecuenceOfFowardForAllPosition stamp: 'ERMC 6/6/2021 18:16:36'!
ERROR!
!Log methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 18:16:41'!
has: aString at: aSmallInteger 
	self shouldBeImplemented.! !
!Log methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 18:17:24' prior: 50900828!
has: aString at: anIndex
 
	aString = (logs at: anIndex) ! !
!Log methodsFor: 'as yet unclassified' stamp: 'ERMC 6/6/2021 18:17:29' prior: 50900833!
has: aString at: anIndex
 
	^aString = (logs at: anIndex) ! !

!testRun: #OLogsTests #test11xxxCompleteSecuenceOfFowardForAllPosition stamp: 'ERMC 6/6/2021 18:17:30'!
PASSED!

!testRun: #OLogsTests #test01WhenMarsRoverMoveForwardLogsPositionChange stamp: 'ERMC 6/6/2021 18:17:30'!
PASSED!

!testRun: #OLogsTests #test02WhenMarsRoverMoveBackwardLogsPositionChange stamp: 'ERMC 6/6/2021 18:17:30'!
PASSED!

!testRun: #OLogsTests #test03WhenMarsRoverRotateRightLogsHeadingChange stamp: 'ERMC 6/6/2021 18:17:30'!
PASSED!

!testRun: #OLogsTests #test04WhenMarsRoverRotateLeftLogsHeadingChange stamp: 'ERMC 6/6/2021 18:17:30'!
PASSED!

!testRun: #OLogsTests #test05WindowLogsPositionChange stamp: 'ERMC 6/6/2021 18:17:30'!
PASSED!

!testRun: #OLogsTests #test06WindowLogsPositionChangeBackward stamp: 'ERMC 6/6/2021 18:17:30'!
PASSED!

!testRun: #OLogsTests #test07WindowLogsHeadingChangeRotateRight stamp: 'ERMC 6/6/2021 18:17:30'!
PASSED!

!testRun: #OLogsTests #test08WindowLogsHeadingChangeRotateLeft stamp: 'ERMC 6/6/2021 18:17:30'!
PASSED!

!testRun: #OLogsTests #test09LogPositionChangeWhenIsHeadingEastAndWindow stamp: 'ERMC 6/6/2021 18:17:30'!
PASSED!

!testRun: #OLogsTests #test10LogPositionChangeWhenIsHeadingWestAndWindow stamp: 'ERMC 6/6/2021 18:17:30'!
PASSED!

!testRun: #OLogsTests #test11xxxCompleteSecuenceOfFowardForAllPosition stamp: 'ERMC 6/6/2021 18:17:30'!
PASSED!

!testRun: #OLogsTests #test11xxxCompleteSecuenceOfFowardForAllPosition stamp: 'ERMC 6/6/2021 18:17:34'!
PASSED!

----QUIT----(6 June 2021 20:04:30) CuisUniversity-4532.image priorSource: 18093159!

----STARTUP---- (7 June 2021 20:17:38) as /Users/edgardo.mosqueira/Desktop/ISW/CuisUniversity/CuisUniversity-4532.image!


Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #NameOfSubclass category: 'TusLibros' stamp: 'ERMC 6/7/2021 20:18:17'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #XXXTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #XXXTests category: 'TusLibros' stamp: 'ERMC 6/7/2021 20:18:36'!
Object subclass: #XXXTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #NameOfSubclass stamp: 'ERMC 6/7/2021 20:18:39'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXXTests methodsFor: 'nil' stamp: 'ERMC 6/7/2021 20:29:28'!
test01CreateAnEmptyCart! !
!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/7/2021 20:30:21'!
test02CreateAValidCartAndAddBooks! !
!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/7/2021 20:30:48'!
test03CanAskForABookToACart! !
!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/7/2021 20:32:40'!
test01CreateAnEmptyCartWithAnIDClient! !

!methodRemoval: XXXTests #test01CreateAnEmptyCart stamp: 'ERMC 6/7/2021 20:32:43'!
test01CreateAnEmptyCart!

----QUIT----(7 June 2021 22:05:05) CuisUniversity-4532.image priorSource: 18215575!

----STARTUP---- (8 June 2021 18:33:48) as /Users/edgardo.mosqueira/Desktop/ISW/CuisUniversity/CuisUniversity-4532.image!

!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 18:37:51'!
test01CreateAnEmptyCart! !

!methodRemoval: XXXTests #test01CreateAnEmptyCartWithAnIDClient stamp: 'ERMC 6/8/2021 18:37:51'!
test01CreateAnEmptyCartWithAnIDClient!

!classDefinition: #Cart category: 'TusLibros' stamp: 'ERMC 6/8/2021 18:40:04'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 18:39:59' prior: 50900947!
test01CreateAnEmptyCart
	
	| cart |
	cart _ Cart new.
	self assert: cart isEmpty.! !
!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 18:40:07' prior: 50900962!
test01CreateAnEmptyCart
	
	| cart |
	cart _ Cart new.
	
	self assert: cart isEmpty.! !

TestCase subclass: #XXXTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #XXXTests category: 'TusLibros' stamp: 'ERMC 6/8/2021 18:40:19'!
TestCase subclass: #XXXTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #XXXTests #test01CreateAnEmptyCart stamp: 'ERMC 6/8/2021 18:40:31'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 18:40:55'!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 18:41:02' prior: 50900987!
isEmpty
	
	^true.! !

!testRun: #XXXTests #test01CreateAnEmptyCart stamp: 'ERMC 6/8/2021 18:41:04'!
PASSED!

!testRun: #XXXTests #test01CreateAnEmptyCart stamp: 'ERMC 6/8/2021 18:41:04'!
PASSED!

!testRun: #XXXTests #test02CreateAValidCartAndAddBooks stamp: 'ERMC 6/8/2021 18:41:04'!
PASSED!

!testRun: #XXXTests #test03CanAskForABookToACart stamp: 'ERMC 6/8/2021 18:41:04'!
PASSED!
!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 18:41:31'!
test02CreateACartAnAddABook! !

!methodRemoval: XXXTests #test02CreateAValidCartAndAddBooks stamp: 'ERMC 6/8/2021 18:41:31'!
test02CreateAValidCartAndAddBooks!
!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 18:45:01' prior: 50901006!
test02CreateACartAnAddABook

	| aBook cart |
	cart _ Cart new.
	aBook _ 'The Lord Of The Rings'.
	cart add: aBook.
	
	self assert: (cart hasABook: aBook)! !

!testRun: #XXXTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 18:45:03'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 18:45:07'!
add: aString 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'ERMC 6/8/2021 18:45:33'!
Object subclass: #Cart
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 18:45:32' prior: 50901024!
add: aBook

	contents add: aBook 
	! !

!testRun: #XXXTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 18:45:34'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 18:46:09' overrides: 16896425!
initialize
	
	contents _ OrderedCollection new.
	! !

!testRun: #XXXTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 18:46:14'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 18:46:17'!
hasABook: aString 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 18:46:40' prior: 50901049!
hasABook: aBook
	
	contents includes: aBook 
		
	! !

!testRun: #XXXTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 18:46:41'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 18:46:55' prior: 50901054!
hasABook: aBook
	
	^contents includes: aBook 
		
	! !

!testRun: #XXXTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 18:46:55'!
PASSED!

!testRun: #XXXTests #test01CreateAnEmptyCart stamp: 'ERMC 6/8/2021 18:46:55'!
PASSED!

!testRun: #XXXTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 18:46:55'!
PASSED!

!testRun: #XXXTests #test03CanAskForABookToACart stamp: 'ERMC 6/8/2021 18:46:55'!
PASSED!
!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 18:47:15'!
test03CanNotAddABookThatIsNotOnTheCatalog
	
	! !

!methodRemoval: XXXTests #test03CanAskForABookToACart stamp: 'ERMC 6/8/2021 18:47:24'!
test03CanAskForABookToACart!
!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 18:49:56' prior: 50901078!
test03CanNotAddABookThatIsNotOnTheCatalog
	
	| aBook cart catalog lordOfTheRing |
	cart _ Cart new.
	catalog _ self createCatalog. 
	lordOfTheRing _ 'Revolution'.
	cart add: aBook.
	
	self assert: (cart hasABook: aBook)! !
!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 18:50:07' prior: 50901087!
test03CanNotAddABookThatIsNotOnTheCatalog
	
	| aBook cart catalog lordOfTheRing |
	cart _ Cart new.
	catalog _ self createCatalog. 
	lordOfTheRing _ 'Revolution'.
	cart add: lordOfTheRing .
	
	self assert: (cart hasABook: aBook)! !
!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 18:50:14' prior: 50901097!
test03CanNotAddABookThatIsNotOnTheCatalog
	
	| aBook cart catalog lordOfTheRing |
	cart _ Cart new.
	catalog _ self createCatalog. 
	lordOfTheRing _ 'Revolution'.
	cart add: lordOfTheRing .
	
	self assert: (cart hasABook: lordOfTheRing)! !
!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 18:50:36' prior: 50901108!
test03CanNotAddABookThatIsNotOnTheCatalog
	
	| aBook cart catalog lordOfTheRing |
	cart _ Cart new.
	catalog _ self createCatalog. 
	aBook _ 'Revolution'.
	lordOfTheRing _ 'Revolution'.
	cart add: lordOfTheRing .
	
	self assert: (cart hasABook: lordOfTheRing)! !
!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 18:56:15' prior: 50901119!
test03CanNotAddABookThatIsNotOnTheCatalog
	
	| aBook cart catalog lordOfTheRing |
	
	cart _ Cart new.
	catalog _ self createCatalog. 
	
	aBook _ 'Revolution'.
	lordOfTheRing _ 'The Lord Of The Rings'.
	cart add: lordOfTheRing.
	
	
	self should: [cart add: aBook ]
		 raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError equals: Cart class canNotAddABookThatIsNotInTheCatalogErrorDescription.
						self assert: (cart hasABook: lordOfTheRing).
						self deny: (cart hasABook: aBook).]
	
	! !
!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 18:57:52' prior: 50901131!
test03CanNotAddABookThatIsNotOnTheCatalog
	
	| aBook cart catalog lordOfTheRing |
	
	cart _ Cart new.
	catalog _ self createCatalog. 
	
	aBook _ 'Revolution'.
	lordOfTheRing _ 'The Lord Of The Rings'.
	cart add: lordOfTheRing.
	
	
	self should: [cart add: aBook ]
		 raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cart class canNotAddABookThatIsNotInTheCatalogErrorDescription.
						self assert: (cart hasABook: lordOfTheRing).
						self deny: (cart hasABook: aBook).]
	
	! !
!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 18:59:06' prior: 50901151!
test03CanNotAddABookThatIsNotOnTheCatalog
	
	| aBook cart catalog lordOfTheRing |
	
	catalog _ self createCatalog. 
	cart _ Cart with: catalog.
	
	aBook _ 'Revolution'.
	lordOfTheRing _ 'The Lord Of The Rings'.
	cart add: lordOfTheRing.
	
	
	self should: [cart add: aBook ]
		 raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cart class canNotAddABookThatIsNotInTheCatalogErrorDescription.
						self assert: (cart hasABook: lordOfTheRing).
						self deny: (cart hasABook: aBook).]
	
	! !

!testRun: #XXXTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 18:59:09'!
ERROR!
!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 18:59:15'!
createCatalog
	self shouldBeImplemented.! !
!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 19:00:01' prior: 50901194!
createCatalog
	
	| catalog |
	catalog _ OrderedCollection new.
	
	catalog add: 'The Lord Of The Rings'.! !
!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 19:00:09' prior: 50901199!
createCatalog
	
	| catalog |
	catalog _ OrderedCollection new.
	
	catalog add: 'The Lord Of The Rings'.
	
	^catalog ! !

!testRun: #XXXTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 19:00:10'!
ERROR!
!Cart class methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 19:00:14'!
with: anOrderedCollection 
	self shouldBeImplemented.! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 19:00:33' prior: 50901216!
with: aCatalog
	
	^self new initializeWith: aCatalog! !

!testRun: #XXXTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 19:00:34'!
ERROR!

!classDefinition: #Cart category: 'TusLibros' stamp: 'ERMC 6/8/2021 19:00:38'!
Object subclass: #Cart
	instanceVariableNames: 'contents catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'ERMC 6/8/2021 19:00:38'!
initializeWith: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'ERMC 6/8/2021 19:00:53' prior: 50901235!
initializeWith: aCatalog 

	catalog _ aCatalog.
	contents _ OrderedCollection new.! !

!testRun: #XXXTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 19:00:54'!
FAILURE!

!testRun: #XXXTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 19:01:24'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 19:02:47' prior: 50901035!
add: aBook
	
	(catalog includes: aBook) ifFalse: [^self error: self class canNotAddABookThatIsNotInTheCatalogErrorDescription].
	contents add: aBook 
	! !

!testRun: #XXXTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 19:02:58'!
ERROR!
!Cart class methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 19:03:03'!
canNotAddABookThatIsNotInTheCatalogErrorDescription
	self shouldBeImplemented.! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 19:03:24' prior: 50901265!
canNotAddABookThatIsNotInTheCatalogErrorDescription
	
	^'Can not add a book that is not in the Catalog'! !

!testRun: #XXXTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 19:03:25'!
ERROR!
!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 19:03:41' prior: 50901171!
test03CanNotAddABookThatIsNotOnTheCatalog
	
	| aBook cart catalog lordOfTheRing |
	
	catalog _ self createCatalog. 
	cart _ Cart with: catalog.
	
	aBook _ 'Revolution'.
	lordOfTheRing _ 'The Lord Of The Rings'.
	cart add: lordOfTheRing.
	
	
	self should: [cart add: aBook ]
		 raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cart canNotAddABookThatIsNotInTheCatalogErrorDescription.
						self assert: (cart hasABook: lordOfTheRing).
						self deny: (cart hasABook: aBook).]
	
	! !

!testRun: #XXXTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 19:03:42'!
PASSED!

!testRun: #XXXTests #test01CreateAnEmptyCart stamp: 'ERMC 6/8/2021 19:03:42'!
PASSED!

!testRun: #XXXTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 19:03:42'!
ERROR!

!testRun: #XXXTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 19:03:42'!
PASSED!

!testRun: #XXXTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 19:03:42'!
ERROR!

!testRun: #XXXTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 19:03:55'!
PASSED!

!testRun: #XXXTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 19:05:13'!
ERROR!

!testRun: #XXXTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 19:05:13'!
ERROR!

!testRun: #XXXTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 19:06:40'!
ERROR!
!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 19:20:33' prior: 50901014!
test02CreateACartAnAddABook

	| aBook cart |
	cart _ Cart with: self createCatalog.
	aBook _ 'The Lord Of The Rings'.
	cart add: aBook.
	
	self assert: (cart hasABook: aBook)! !
!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 19:20:43' prior: 50901328!
test02CreateACartAnAddABook

	| aBook cart |
	cart _ Cart with: self createCatalog.
	aBook _ 'The Lord Of The Rings'.
	
	cart add: aBook.
	
	self assert: (cart hasABook: aBook)! !

!testRun: #XXXTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 19:20:45'!
PASSED!

!testRun: #XXXTests #test01CreateAnEmptyCart stamp: 'ERMC 6/8/2021 19:20:45'!
PASSED!

!testRun: #XXXTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 19:20:45'!
PASSED!

!testRun: #XXXTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 19:20:45'!
PASSED!
!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 19:48:05'!
test04WhenABookIsAddedIsSavedWithQuantity
	
	| aBook cart catalog lordOfTheRing |

	cart _ Cart with: self createCatalog.
	
	aBook _ 'Harry Potter'.
	cart add: aBook withQuantity: 5.
	
	self assert: (cart cantOf: aBook) equals: 5.
	
	
	! !
!XXXTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 19:48:24' prior: 50901357!
test04WhenABookIsAddedIsSavedWithQuantity
	
	| aBook cart |

	cart _ Cart with: self createCatalog.
	
	aBook _ 'Harry Potter'.
	cart add: aBook withQuantity: 5.
	
	self assert: (cart cantOf: aBook) equals: 5.
	
	
	! !

!testRun: #XXXTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 19:48:36'!
ERROR!

!classRenamed: #XXXTests as: #CartTests stamp: 'ERMC 6/8/2021 19:48:52'!
Smalltalk renameClassNamed: #XXXTests as: #CartTests!

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 19:48:56'!
ERROR!

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 19:48:56'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 19:49:00'!
add: aString withQuantity: aSmallInteger 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 19:49:22' prior: 50901042 overrides: 16896425!
initialize
	
	contents _ Dictionary new.
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 19:49:37' prior: 50901391!
add: aBook withQuantity: aSmallInteger 
	
	.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 19:55:39' prior: 50901402!
add: aBook withQuantity: aSmallInteger 
	
	contents add: aBook->'hello2'.! !

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 19:55:42'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 19:56:21' prior: 50901407!
add: aBook withQuantity: aBookQuantity
	
	contents add: aBook->aBookQuantity.! !

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 19:56:22'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 19:56:25'!
cantOf: aString 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 19:58:43' prior: 50901425!
cantOf: aBook
	
	contents keyAtValue: aBook ifAbsent: [^false.]
	
	! !

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 19:58:45'!
ERROR!

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 19:59:01'!
ERROR!

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 19:59:01'!
ERROR!

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 19:59:38'!
ERROR!

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 19:59:38'!
ERROR!

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 20:00:36'!
ERROR!

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 20:00:36'!
ERROR!

!methodRemoval: Cart #initialize stamp: 'ERMC 6/8/2021 20:01:14'!
initialize
	
	contents _ Dictionary new.
	!
!Cart methodsFor: 'initialization' stamp: 'ERMC 6/8/2021 20:01:25' prior: 50901241!
initializeWith: aCatalog 

	catalog _ aCatalog.
	contents _ Dictionary new.! !

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 20:01:29'!
FAILURE!

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 20:01:29'!
FAILURE!

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 20:03:35'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 20:04:08' prior: 50901430!
cantOf: aBook
	
	contents at: aBook ifAbsent: [^false.]
	
	! !

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 20:04:10'!
FAILURE!
!CartTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 20:05:02' prior: 50901206!
createCatalog
	
	| catalog |
	catalog _ OrderedCollection new.
	
	catalog add: 'The Lord Of The Rings' .
	catalog add: 'Harry Potter'.
	
	^catalog ! !

self value.!

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 20:05:42'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 20:06:12' prior: 50901478!
cantOf: aBook
	
	^contents at: aBook ifAbsent: [^false.]
	
	! !

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 20:06:13'!
PASSED!

!testRun: #CartTests #test01CreateAnEmptyCart stamp: 'ERMC 6/8/2021 20:06:13'!
PASSED!

!testRun: #CartTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 20:06:13'!
ERROR!

!testRun: #CartTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 20:06:13'!
ERROR!

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 20:06:13'!
PASSED!

!testRun: #CartTests #test01CreateAnEmptyCart stamp: 'ERMC 6/8/2021 20:06:18'!
PASSED!

!testRun: #CartTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 20:06:22'!
ERROR!

!testRun: #CartTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 20:06:22'!
ERROR!

!testRun: #CartTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 20:06:27'!
ERROR!
!CartTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 20:08:06' prior: 50901337!
test02CreateACartAnAddABook

	| aBook cart |
	cart _ Cart with: self createCatalog.
	aBook _ 'The Lord Of The Rings'.
	
	cart add: aBook withQuantity: 1.
	
	self assert: (cart hasABook: aBook).
	self deny: cart isEmpty.! !

!testRun: #CartTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 20:08:07'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 20:08:53' prior: 50901062!
hasABook: aBook
	
	^contents includesKey: aBook 
		
	! !

!testRun: #CartTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 20:08:54'!
FAILURE!
!CartTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 20:09:33' prior: 50901531!
test02CreateACartAnAddABook

	| aBook cart |
	cart _ Cart with: self createCatalog.
	aBook _ 'The Lord Of The Rings'.
	
	cart add: aBook withQuantity: 1.
	
	self assert: (cart hasABook: aBook).
	self deny: (cart isEmpty).! !

!testRun: #CartTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 20:09:34'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 20:09:49' prior: 50900991!
isEmpty
	
	^ contents isEmpty ! !

!testRun: #CartTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 20:09:55'!
PASSED!

!testRun: #CartTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 20:09:56'!
ERROR!

!testRun: #CartTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 20:09:56'!
ERROR!

!testRun: #CartTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 20:10:02'!
ERROR!
!CartTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 20:10:14' prior: 50901281!
test03CanNotAddABookThatIsNotOnTheCatalog
	
	| aBook cart catalog lordOfTheRing |
	
	catalog _ self createCatalog. 
	cart _ Cart with: catalog.
	
	aBook _ 'Revolution'.
	lordOfTheRing _ 'The Lord Of The Rings'.
	cart add: lordOfTheRing.
	
	
	self should: [cart add: aBook withQuantity: 1 ]
		 raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cart canNotAddABookThatIsNotInTheCatalogErrorDescription.
						self assert: (cart hasABook: lordOfTheRing).
						self deny: (cart hasABook: aBook).]
	
	! !

!testRun: #CartTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 20:10:15'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 20:10:36' prior: 50901416!
add: aBook withQuantity: aBookQuantity
	
	(catalog includesKey: aBook) ifFalse: [^self error: self class canNotAddABookThatIsNotInTheCatalogErrorDescription].
	contents add: aBook->aBookQuantity.! !

!testRun: #CartTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 20:10:42'!
ERROR!

!testRun: #CartTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 20:10:42'!
ERROR!
!CartTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 20:10:59' prior: 50901582!
test03CanNotAddABookThatIsNotOnTheCatalog
	
	| aBook cart catalog lordOfTheRing |
	
	catalog _ self createCatalog. 
	cart _ Cart with: catalog.
	
	aBook _ 'Revolution'.
	lordOfTheRing _ 'The Lord Of The Rings'.
	cart add: lordOfTheRing withQuantity: 1.
	
	
	self should: [cart add: aBook withQuantity: 1 ]
		 raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cart canNotAddABookThatIsNotInTheCatalogErrorDescription.
						self assert: (cart hasABook: lordOfTheRing).
						self deny: (cart hasABook: aBook).]
	
	! !

!testRun: #CartTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 20:11:01'!
ERROR!

!testRun: #CartTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 20:11:09'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 20:11:45' prior: 50901606!
add: aBook withQuantity: aBookQuantity
	
	(catalog includesKey: aBook) ifFalse: [^self error: self class canNotAddABookThatIsNotInTheCatalogErrorDescription].
	contents add: aBook->aBookQuantity.! !

!testRun: #CartTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 20:11:48'!
ERROR!

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 20:11:52'!
ERROR!

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 20:11:52'!
ERROR!

!testRun: #CartTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 20:11:56'!
ERROR!

!testRun: #CartTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 20:11:56'!
ERROR!

!testRun: #CartTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 20:12:14'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 20:12:27' prior: 50901650!
add: aBook withQuantity: aBookQuantity
	
	(catalog includes: aBook) ifFalse: [^self error: self class canNotAddABookThatIsNotInTheCatalogErrorDescription].
	contents add: aBook->aBookQuantity.! !

!testRun: #CartTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 20:12:28'!
PASSED!

!testRun: #CartTests #test01CreateAnEmptyCart stamp: 'ERMC 6/8/2021 20:12:33'!
ERROR!

!testRun: #CartTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 20:12:33'!
PASSED!

!testRun: #CartTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 20:12:33'!
PASSED!

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 20:12:33'!
PASSED!

!testRun: #CartTests #test01CreateAnEmptyCart stamp: 'ERMC 6/8/2021 20:12:33'!
ERROR!

!testRun: #CartTests #test01CreateAnEmptyCart stamp: 'ERMC 6/8/2021 20:13:07'!
ERROR!
!CartTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 20:13:26' prior: 50900968!
test01CreateAnEmptyCart
	
	| cart |
	cart _ Cart with: self createCatalog.
	
	self assert: cart isEmpty.! !

!testRun: #CartTests #test01CreateAnEmptyCart stamp: 'ERMC 6/8/2021 20:13:28'!
PASSED!

!testRun: #CartTests #test01CreateAnEmptyCart stamp: 'ERMC 6/8/2021 20:13:32'!
PASSED!

!testRun: #CartTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 20:13:32'!
PASSED!

!testRun: #CartTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 20:13:32'!
PASSED!

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 20:13:32'!
PASSED!
!CartTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 20:15:59'!
test05CanAskForTheContentOfTheCart
	
	| aBook cart |

	cart _ Cart with: self createCatalog.
	
	aBook _ 'Harry Potter'.
	cart add: aBook withQuantity: 1.
	
	self assert: (cart has: aBook)
	
	
	! !

!testRun: #CartTests #test05CanAskForTheContentOfTheCart stamp: 'ERMC 6/8/2021 20:16:03'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 20:16:21'!
has: aBook
	
	^contents includesKey: aBook 
		
	! !

!methodRemoval: Cart #hasABook: stamp: 'ERMC 6/8/2021 20:16:21'!
hasABook: aBook
	
	^contents includesKey: aBook 
		
	!

!testRun: #CartTests #test05CanAskForTheContentOfTheCart stamp: 'ERMC 6/8/2021 20:16:34'!
PASSED!
!CartTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 20:17:25'!
test01CreateAnEmptyCartWithCatalog
	
	| cart |
	cart _ Cart with: self createCatalog.
	
	self assert: cart isEmpty.! !

!methodRemoval: CartTests #test01CreateAnEmptyCart stamp: 'ERMC 6/8/2021 20:17:25'!
test01CreateAnEmptyCart
	
	| cart |
	cart _ Cart with: self createCatalog.
	
	self assert: cart isEmpty.!
!CartTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 20:18:03' prior: 50901731!
test05CanAskForTheContentOfTheCart
	
	| aBook cart |

	cart _ Cart with: self createCatalog.
	
	aBook _ 'Harry Potter'.
	cart add: aBook withQuantity: 2.
	
	self assert: (cart has: aBook)
	
	
	! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 20:18:10' prior: 50901767!
test05CanAskForTheContentOfTheCart
	
	| aBook cart |

	cart _ Cart with: self createCatalog.
	
	aBook _ 'Harry Potter'.
	cart add: aBook withQuantity: 1.
	
	self assert: (cart has: aBook)
	
	
	! !

!testRun: #CartTests #test01CreateAnEmptyCartWithCatalog stamp: 'ERMC 6/8/2021 20:18:13'!
PASSED!

!testRun: #CartTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 20:18:13'!
ERROR!

!testRun: #CartTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 20:18:13'!
ERROR!

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 20:18:13'!
PASSED!

!testRun: #CartTests #test05CanAskForTheContentOfTheCart stamp: 'ERMC 6/8/2021 20:18:13'!
PASSED!

!testRun: #CartTests #test01CreateAnEmptyCartWithCatalog stamp: 'ERMC 6/8/2021 20:18:32'!
PASSED!
!CartTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 20:18:42' prior: 50901552!
test02CreateACartAnAddABook

	| aBook cart |
	cart _ Cart with: self createCatalog.
	aBook _ 'The Lord Of The Rings'.
	
	cart add: aBook withQuantity: 1.
	
	self assert: (cart has: aBook).
	self deny: (cart isEmpty).! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 20:18:50' prior: 50901622!
test03CanNotAddABookThatIsNotOnTheCatalog
	
	| aBook cart catalog lordOfTheRing |
	
	catalog _ self createCatalog. 
	cart _ Cart with: catalog.
	
	aBook _ 'Revolution'.
	lordOfTheRing _ 'The Lord Of The Rings'.
	cart add: lordOfTheRing withQuantity: 1.
	
	
	self should: [cart add: aBook withQuantity: 1 ]
		 raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cart canNotAddABookThatIsNotInTheCatalogErrorDescription.
						self assert: (cart has: lordOfTheRing).
						self deny: (cart hasABook: aBook).]
	
	! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'ERMC 6/8/2021 20:18:53' prior: 50901815!
test03CanNotAddABookThatIsNotOnTheCatalog
	
	| aBook cart catalog lordOfTheRing |
	
	catalog _ self createCatalog. 
	cart _ Cart with: catalog.
	
	aBook _ 'Revolution'.
	lordOfTheRing _ 'The Lord Of The Rings'.
	cart add: lordOfTheRing withQuantity: 1.
	
	
	self should: [cart add: aBook withQuantity: 1 ]
		 raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cart canNotAddABookThatIsNotInTheCatalogErrorDescription.
						self assert: (cart has: lordOfTheRing).
						self deny: (cart has: aBook).]
	
	! !

!testRun: #CartTests #test01CreateAnEmptyCartWithCatalog stamp: 'ERMC 6/8/2021 20:18:59'!
PASSED!

!testRun: #CartTests #test02CreateACartAnAddABook stamp: 'ERMC 6/8/2021 20:18:59'!
PASSED!

!testRun: #CartTests #test03CanNotAddABookThatIsNotOnTheCatalog stamp: 'ERMC 6/8/2021 20:18:59'!
PASSED!

!testRun: #CartTests #test04WhenABookIsAddedIsSavedWithQuantity stamp: 'ERMC 6/8/2021 20:18:59'!
PASSED!

!testRun: #CartTests #test05CanAskForTheContentOfTheCart stamp: 'ERMC 6/8/2021 20:18:59'!
PASSED!